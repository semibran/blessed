{"version":3,"file":"index.js","sources":["src/utils/color.js","src/utils/rng.js","src/utils/cell.js","src/utils/rect.js","src/utils/world.js","src/utils/actor.js","src/utils/ai.js","src/utils/gen.js","src/utils/fov.js","src/utils/game.js","src/index.js"],"sourcesContent":["const names  = [  'black',  'maroon',   'green',   'olive',    'navy',  'purple',    'teal',  'silver',    'gray',     'red',    'lime',  'yellow',    'blue', 'fuchsia',    'aqua',   'white']\nconst values = ['#000000', '#800000', '#008000', '#808000', '#000080', '#800080', '#008080', '#c0c0c0', '#808080', '#ff0000', '#00ff00', '#ffff00', '#0000ff', '#ff00ff', '#00ffff', '#ffffff']\n\nlet MAP = {}\nlet map = {}\n\nlet index = 0\nfor (let name of names) {\n  let NAME  = name.toUpperCase()\n  MAP[NAME] = values[index]\n  map[name] = values[index++]\n}\n\nlet Color = Object.assign({ names, values, map }, MAP)\n\nexport default Color\n","let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if ( isNaN(initialSeed) )\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1) {\n      if ( !isNaN(min) )\n        max = min, min = 0\n      else if ( Array.isArray(min) )\n        [min, max] = min\n    }\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor( get() * (max - min) ) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if ( !isNaN(array) )\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[ get(array.length) ]\n  }\n\n  function seed(newSeed) {\n    if ( !isNaN(newSeed) )\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","const directions = {\n  left:      [-1,  0],\n  upLeft:    [-1, -1],\n  up:        [ 0, -1],\n  upRight:   [ 1, -1],\n  right:     [ 1,  0],\n  downRight: [ 1,  1],\n  down:      [ 0,  1],\n  downLeft:  [-1,  1]\n}\nconst { left, upLeft, up, upRight, right, downRight, down, downLeft } = directions\nconst cardinalDirections = { left, up, right, down }\n\nexport default {\n\n  // Constants\n  left, right, up, down, upLeft, upRight, downLeft, downRight, directions, cardinalDirections,\n\n  // Methods\n  isCell, isEqual, isEdge, isInside, isNeighbor, toString, fromString, toIndex, fromIndex, getNeighbors, getManhattan, getDistance\n\n}\n\nfunction isCell(value) {\n  return value && Array.isArray(value) && value.length === 2 && !value.filter(value => isNaN(value) || typeof value !== 'number').length\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if (Array.isArray(size))\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return isInside(cell, size) && (x === rectX || x === rectX + rectWidth - 1 || y === rectY || y === rectY + rectHeight - 1)\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if (Array.isArray(size))\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction isNeighbor(cell, other) {\n  let [cx, cy] = cell\n  let [ox, oy] = other\n  let dx = Math.abs(ox - cx)\n  let dy = Math.abs(oy - cy)\n  return (!dx || dx === 1) && (!dy || dy === 1)\n}\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!isCell(cell))\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let dirs = cardinalDirections\n  if (diagonals)\n    dirs = directions\n  for (let key in dirs) {\n    let [dx, dy] = dirs[key]\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  let [ax, ay] = a\n  let [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n\nfunction getDistance(a, b, sqrt) {\n  if (typeof sqrt === 'undefined')\n    sqrt = true\n  let [ax, ay] = a\n  let [bx, by] = b\n  let [dx, dy] = [bx - ax, by - ay]\n  let squared  = dx * dx + dy * dy\n  if (sqrt)\n    return Math.sqrt(squared)\n  return squared\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { Cell, Rect } from './index'\n\nconst tileData = [\n  'floor walkable',\n  'wall opaque',\n  'door opaque door',\n  'doorOpen walkable door',\n  'doorSecret opaque door secret',\n  'entrance walkable stairs',\n  'exit walkable stairs'\n]\n\nconst tiles = function (tileData) {\n  let tiles = []\n  let i = tileData.length\n  while (i--) {\n    let tile  = tiles[i] = { type: 'tile', id: i }\n    let props = tileData[i].split(' ')\n    let kind  = tile.kind = props.splice(0, 1)[0]\n    for (let prop of props)\n      tile[prop] = true\n  }\n  return tiles\n}(tileData)\n\nconst tileIds = function (tiles) {\n  let tileIds = {}\n  let i = 0\n  for (let tile of tiles) {\n    let id = tile.kind.split('').reduce((result, char, index) => {\n      let CHAR = char.toUpperCase()\n      if (char === CHAR || !index)\n        result[result.length] = ''\n      result[result.length - 1] += CHAR\n      return result\n    }, []).join('_')\n    tileIds[id] = i\n    i++\n  }\n  return tileIds\n}(tiles)\n\nconst tileCosts = function (tiles) {\n  let tileCosts = []\n  for (let tile of tiles) {\n    let cost = 0\n    if (!tile.walkable && !tile.door)\n      cost = Infinity\n    if (tile.secret)\n      cost = 1000\n    if (tile.door) {\n      cost++\n      if (!tile.walkable)\n        cost++\n    }\n    tileCosts.push(cost)\n  }\n  return tileCosts\n}(tiles)\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT } = tileIds\n\nexport default { create, tiles, tileIds, tileCosts }\n\nfunction create(size) {\n\n  let data  = new Uint8ClampedArray(size * size)\n  let world = {\n\n    // Properties\n    size, data, elements: new Set, entrance: null, exit: null,\n\n    // Methods\n    getAt, tileAt, elementsAt, setAt, fill, clear, spawn, kill, findPath\n\n  }\n\n  return world\n\n  function getAt(cell) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    return data[index]\n  }\n\n  function tileAt(cell) {\n    return tiles[getAt(cell)]\n  }\n\n  function elementsAt(cell) {\n    return [...world.elements].filter(element => Cell.isEqual(cell, element.cell))\n  }\n\n  function setAt(cell, value) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    data[index] = value\n    return value\n  }\n\n  function fill(value, rect) {\n    if (typeof value === 'undefined')\n      value = WALL\n    if (rect) {\n      let cells = Rect.getCells(rect)\n      for (let cell of cells)\n        setAt(data, cell, value)\n    } else {\n      let i = data.length\n      while (i--)\n        data[i] = value\n    }\n    return world\n  }\n\n  function clear() {\n    fill(FLOOR)\n    return world\n  }\n\n  function spawn(element, cell) {\n    if (!world.rooms || !element || !cell)\n      return null\n    if (element in tiles) {\n      setAt(cell, element)\n      if (element === ENTRANCE)\n        world.entrance = cell\n      if (element === EXIT)\n        world.exit = cell\n    } else if (typeof element === 'object') {\n      element.world = world\n      element.cell  = cell\n      world.elements.add(element)\n    }\n    return cell\n  }\n\n  function kill(element) {\n    world.elements.delete(element)\n  }\n\n  function findPath(start, goal, costs, diagonals) {\n\n    if (!costs)\n      costs = {}\n\n    if (!costs.tiles)\n      costs.tiles = tileCosts\n\n    if (!costs.cells)\n      costs.cells = {}\n\n    let path = []\n\n    let startKey = start.toString()\n    let goalKey  = goal.toString()\n\n    let opened = [startKey]\n    let closed = {}\n\n    let scores = { f: {}, g: {} }\n    let parent = {}\n\n    let cells = data.map((id, index) => Cell.fromIndex(index, size))\n    for (let cell of cells) {\n      scores.g[cell] = Infinity\n      scores.f[cell] = Infinity\n    }\n\n    scores.g[start] = 0\n    scores.f[start] = Cell.getManhattan(start, goal)\n\n    while (opened.length) {\n      if (opened.length > 1)\n        opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n      let cellKey = opened.pop()\n      let cell = Cell.fromString(cellKey)\n      if (cellKey === goalKey) {\n        let cell = goal\n        do {\n          path.unshift(cell)\n          cell = parent[cell]\n        } while (cell)\n        return path\n      }\n      closed[cell] = true\n      for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n        if (!Cell.isInside(neighbor, size) || neighbor in closed)\n          continue\n        let key = neighbor.toString()\n        let tileCost = costs.tiles[getAt(neighbor)] || 0\n        let cellCost = costs.cells[neighbor] || 0\n        let cost = tileCost + cellCost\n        if (cost === Infinity && key !== goalKey)\n          continue\n        let g = scores.g[cell] + 1 + cost\n        if ( !opened.includes(key) )\n          opened.push(key)\n        else if ( g >= scores.g[neighbor] )\n          continue\n        parent[neighbor] = cell\n        scores.g[neighbor] = g\n        scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n      }\n    }\n\n    return null\n\n  }\n\n}\n","import { Cell, World, FOV } from './index'\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT } = World.tileIds\n\nexport default { create }\n\nfunction create(options) {\n\n  let actor = {\n    faction: null,\n    kind: null,\n    goal: null,\n    speed: 1\n  }\n\n  let props = {\n    type: 'actor',\n    wandering: true,\n    health: 1,\n    energy: 0,\n    hunger: 0,\n    seeing: {},\n    known: {},\n    world: null,\n    cell: null\n  }\n\n  Object.assign(actor, options, props, { look, perform, move, moveTo, attack, collect, open, close, descend, ascend })\n\n  let path = null\n\n  return actor\n\n  function look() {\n    let cells = FOV.get(actor.world, actor.cell, 7)\n    actor.seeing = {}\n    if (!actor.known[actor.worldId])\n      actor.known[actor.worldId] = {}\n    for (var cell of cells) {\n      let kind = actor.world.tileAt(cell).kind\n      let other = actor.world.elementsAt(cell)[0]\n      if (other)\n        kind = other.kind\n      actor.known[actor.worldId][cell] = kind\n      actor.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let [cellX, cellY] = actor.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let tile = actor.world.tileAt(target)\n    let elements = actor.world.elementsAt(target)\n    let entities = elements.filter(element => element.type === 'actor')\n    let items    = elements.filter(element => element.type === 'item')\n    if (entities.length) {\n      return entities[0]\n    } else if (tile.walkable) {\n      actor.cell = target\n      return true\n    } else if (tile.door) {\n      return target\n    }\n    return false\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target ) {\n      let cells = {}\n      // let entities = [...actor.world.elements].filter(element => element.type === 'actor')\n      // actor.world.data.forEach((id, index) => {\n      //   let cell = Cell.fromIndex(index, actor.world.size)\n      //   if (!actor.known[actor.world.id][cell] || entities.filter(other => Cell.isEqual(other.cell, cell) && other !== actor).length)\n      //     cells[cell] = Infinity\n      // })\n      path = actor.world.findPath(actor.cell, target, { cells })\n    }\n    if (!path)\n      return false\n    let next\n    path.forEach((cell, index) => {\n      if ( !Cell.isEqual(actor.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = actor.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return actor.move(dist)\n  }\n\n  function attack(other) {\n    other.health--\n    if (other.health <= 0){\n      other.health = 0\n      actor.world.kill(other)\n      actor.world.elements.add({\n        type: 'sprite',\n        kind: 'corpse',\n        cell: other.cell,\n        origin: other.kind\n      })\n    }\n  }\n\n  function collect(item) {\n    if (Cell.isEqual(actor.cell, item.cell))\n      actor.world.kill(item)\n  }\n\n  function open(cell) {\n    if (!Cell.isCell(cell) || !Cell.isNeighbor(cell, actor.cell))\n      return false\n    let tile = actor.world.tileAt(cell)\n    if (!tile.door)\n      return false\n    actor.world.setAt(cell, DOOR_OPEN)\n    return true\n  }\n\n  function close(cell) {\n    if (!cell) {\n      let neighbors = Cell.getNeighbors(actor.cell, true).filter(neighbor => actor.world.getAt(neighbor) === DOOR_OPEN)\n      if (!neighbors.length)\n        return false\n      for (let neighbor of neighbors)\n        actor.world.setAt(neighbor, DOOR)\n      return true\n    } else {\n      if (!Cell.isCell(cell) || !Cell.isNeighbor(cell, actor.cell))\n        return false\n      let tile = actor.world.tileAt(cell)\n      if (!tile.door)\n        return false\n      actor.world.setAt(cell, DOOR)\n      return true\n    }\n  }\n\n  function descend() {\n    let id = actor.world.getAt(actor.cell)\n    if (id === EXIT)\n      return true\n    return false\n  }\n\n  function ascend() {\n    let id = actor.world.getAt(actor.cell)\n    if (id === ENTRANCE)\n      return true\n    return false\n  }\n\n  function perform(action) {\n    let { type, kind, data } = action\n    if (type !== 'action')\n      throw new TypeError(`Cannot perform action of type '${type}'`)\n    switch (kind) {\n      case 'move':    return move(...data)\n      case 'moveTo':  return moveTo(...data)\n      case 'attack':  return attack(...data)\n      case 'collect': return collect(...data)\n      case 'open':    return open(...data)\n      case 'close':   return close(...data)\n      case 'descend':    return descend(...data)\n      case 'ascend':   return ascend(...data)\n      case 'wait':    return true\n    }\n  }\n}\n","import { Cell } from './index'\n\nexport default { create }\n\nfunction create(rng) {\n\n  return { getAction }\n\n  function getAction(actor) {\n    if (!actor.goal || Cell.isEqual(actor.cell, actor.goal)) {\n      let room = rng.choose([...actor.world.rooms.normal])\n      let cell\n      do {\n        cell = rng.choose(room.cells)\n      } while (Cell.isEqual(actor.cell, cell))\n      actor.goal = cell\n    }\n    return { type: 'action', kind: 'moveTo', data: [actor.goal] }\n  }\n\n}\n","import { RNG, World, Actor, Cell, Rect } from './index'\n\nconst { FLOOR, DOOR, DOOR_SECRET, ENTRANCE, EXIT } = World.tileIds\n\nlet rng = RNG.create()\n\nexport default { createDungeon }\n\nfunction createDungeon(size, seed) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  if (typeof seed === 'object') {\n    rng = seed\n    seed = rng.seed()\n  } else if ( isNaN(seed) ) {\n    seed = rng.get()\n    rng.seed(seed)\n  }\n\n  // console.log('Seed:', seed)\n\n  let world = World.create(size).fill()\n  let data = world.data\n\n  let rooms = findRooms(size)\n  let mazes = findMazes(size, rooms)\n  let doors = findDoors(rooms, mazes)\n  fillEnds(mazes)\n\n  for (let room of rooms.list)\n    for (let cell of room.cells)\n      world.setAt(cell, FLOOR)\n\n  for (let maze of mazes.list)\n    for (let cell of maze.cells)\n      world.setAt(cell, FLOOR)\n\n  for (let cellId in doors) {\n    let cell = Cell.fromString(cellId)\n    let type = DOOR\n    let regions = doors[cellId]\n    let room = regions.sort((a, b) => a.neighbors.size - b.neighbors.size)[0]\n    let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.ends)\n    if (!neighbors.length && room.neighbors.size === 1 && rng.choose()) {\n      type = DOOR_SECRET\n      rooms.normal.delete(room)\n      rooms.secret.add(room)\n    } else if (rng.choose())\n      type = FLOOR\n    world.setAt(cell, type)\n  }\n\n  world.rooms = rooms\n\n  function spawn(element, flags) {\n\n    let rooms, cell\n\n    if (!flags)\n      flags = []\n    else {\n      if (typeof flags === 'string')\n        flags = flags.split(' ')\n      else if (Cell.isCell(flags)) {\n        cell = flags\n        flags = []\n      }\n    }\n    flags = new Set(flags)\n\n    if (!cell) {\n\n      if (flags.has('secret'))\n        rooms = [...world.rooms.secret]\n      else\n        rooms = [...world.rooms.normal]\n\n      do {\n        let room = rng.choose(rooms)\n        if (flags.has('center'))\n          cell = room.center\n        else\n          cell = rng.choose(room.cells)\n      } while (world.getAt(cell) !== FLOOR || world.elementsAt(cell).length)\n\n    }\n\n    world.spawn(element, cell)\n\n    return cell\n\n  }\n\n  let i = 3\n  while (i--)\n    spawn(Actor.create({ kind: 'wyrm', faction: 'enemies', speed: 1 / 2 }))\n\n  spawn(ENTRANCE, 'center')\n  spawn(EXIT, 'center')\n\n  return world\n}\n\nlet findRooms = function () {\n\n  let findRoom = function () {\n\n    return function findRoom(min, max, worldSize) {\n      let w = findRoomSize(min, max)\n      let h = findRoomSize(min, max)\n      let x = findRoomPosition(w, worldSize)\n      let y = findRoomPosition(h, worldSize)\n      return [x, y, w, h]\n    }\n\n    function findRoomSize(min, max) {\n      return rng.get((max - min) / 2 + 1) * 2 + min\n    }\n\n    function findRoomPosition(roomSize, worldSize) {\n      return rng.get((worldSize - roomSize) / 2) * 2 + 1\n    }\n\n  }()\n\n  return function findRooms(size) {\n    let area = size * size\n    let rooms = { list: [], normal: new Set, secret: new Set, cells: {}, edges: {} }\n    let matrices = {}\n    let fails = 0\n    let valid = true\n    while (valid) {\n      let shape, matrix, cells, center\n      do {\n        shape  = 'rect'\n        matrix = findRoom(3, 9, size)\n        if (matrix in matrices)\n          valid = false\n        else {\n          cells = Rect.getCells(matrix)\n          center = Rect.getCenter(matrix)\n          valid = matrices[matrix] = !isIntersecting(rooms, cells)\n        }\n        if (valid)\n          break\n        fails++\n      } while (fails < size * 2)\n      if (!valid)\n        break\n      let edges  = Rect.getEdges(matrix, true)\n      let room = { type: 'room', shape, matrix, cells, edges, center }\n      rooms.normal.add(room)\n      rooms.list.push(room)\n      for (let cell of cells)\n        rooms.cells[cell] = room\n      for (let edge of edges) {\n        if (!rooms.edges[edge])\n          rooms.edges[edge] = []\n        let sharedEdges = rooms.edges[edge]\n        sharedEdges.push(room)\n      }\n    }\n    return rooms\n  }\n\n  function isIntersecting(rooms, cells) {\n    for (let cell of cells)\n      if (cell in rooms.cells)\n        return true\n    return false\n  }\n\n}()\n\nlet findMazes = function () {\n\n  return function findMazes(size, rooms, step) {\n    step = step || 2\n    let mazes = { list: [], cells: {}, ends: {} }\n    let nodes = new Set(findNodes(size)\n      .filter(node => !(node in rooms.cells) && !Cell.getNeighbors(node, true).filter(neighbor => neighbor in rooms.cells).length)\n      .map(Cell.toString))\n    while (nodes.size) {\n      let start = Cell.fromString(rng.choose( [...nodes] ))\n      let stack = [start]\n      let maze = { type: 'maze', cells: [], ends: [] }\n      let backtracking = true\n      while (stack.length) {\n        let cell, [cellX, cellY] = cell = stack[stack.length - 1]\n        addCell(mazes, maze, cell)\n        nodes.delete(cell.toString())\n        let neighbors = Cell.getNeighbors(cell, false, step).filter(neighbor => nodes.has(neighbor.toString()))\n        if (neighbors.length) {\n          let next = rng.choose(neighbors)\n          let [nextX, nextY] = next\n          let [cellX, cellY] = cell\n          let mid, [midX, midY] = mid = [cellX + (nextX - cellX) / step, cellY + (nextY - cellY) / step]\n          addCell(mazes, maze, mid)\n          stack.push(next)\n          backtracking = false\n          if (cell === start && !backtracking)\n            addEnd(mazes, maze, cell)\n        } else {\n          if (!backtracking)\n            addEnd(mazes, maze, cell)\n          backtracking = true\n          stack.pop()\n        }\n      }\n      mazes.list.push(maze)\n    }\n    return mazes\n  }\n\n  function findNodes(worldSize, offset) {\n    offset = offset || 0\n    let nodes = []\n    let half = (worldSize - 1) / 2 - offset\n    let i = half * half\n    while (i--) {\n      let [nodeX, nodeY] = Cell.fromIndex(i, half)\n      let node = [nodeX * 2 + 1 + offset, nodeY * 2 + 1 + offset]\n      let neighbors = null\n      nodes.push(node)\n    }\n    return nodes\n  }\n\n  function addCell(mazes, maze, cell) {\n    maze.cells.push(cell)\n    mazes.cells[cell] = maze\n  }\n\n  function addEnd(mazes, maze, cell) {\n    maze.ends.push(cell)\n    mazes.ends[cell] = maze\n  }\n\n}()\n\nlet findDoors = function () {\n\n  return function findDoors(rooms, mazes) {\n\n    let connectorRegions = getConnectors(rooms, mazes)\n\n    let start = rng.choose(rooms.list)\n    let stack = [start]\n    let doors = {}\n    let mainRegion = new Set\n    let dead = new Set\n\n    let regions = rooms.list.concat(mazes.list)\n    for (let region of regions) {\n      region.neighbors = new Map\n      region.doors = {}\n    }\n\n    while (stack.length) {\n      let node = stack[stack.length - 1]\n      mainRegion.add(node)\n\n      let connectors\n      if (node.type === 'room')\n        connectors = node.edges.filter(cell => {\n          if (!(cell in connectorRegions))\n            return false\n          let next = connectorRegions[cell].find(region => region !== node)\n          return !dead.has(next) && next.cells.length > 1\n        })\n      else if (node.type === 'maze')\n        connectors = node.cells.reduce((result, cell) => {\n          return result.concat(Cell.getNeighbors(cell).filter(neighbor => neighbor in connectorRegions))\n        }, [])\n      connectors = connectors.filter(cell => {\n        let next = connectorRegions[cell].find(region => region !== node)\n        let nearby = Cell.getNeighbors(cell, true).filter(neighbor => neighbor in doors)\n        return !(cell in doors) && !node.neighbors.has(next) && (!mainRegion.has(next) || rng.choose(10)) && !nearby.length\n      })\n\n      let connectorIds = connectors.map(Cell.toString)\n\n      if (connectors.length) {\n        let door = rng.choose(connectors)\n        let regions = connectorRegions[door]\n        let next = regions.find(region => region !== node)\n        for (let cell of next.cells) {\n          Cell.getNeighbors(cell).forEach(neighbor => {\n            if (connectorIds.includes(neighbor.toString())) {\n              delete connectorRegions[neighbor]\n            }\n          })\n        }\n        stack.push(next)\n        doors[door] = regions\n        mainRegion.add(node)\n        connect(node, next, door)\n      } else {\n        stack.pop()\n        if (node.type === 'maze' && node.neighbors.size === 1) {\n          let next = node.neighbors.entries().next().value[0]\n          let cell = node.neighbors.get(next)\n          delete doors[cell]\n          disconnect(node, next)\n          mainRegion.delete(node)\n          dead.add(node)\n        }\n      }\n    }\n\n    return doors\n\n  }\n\n  function getConnectors(rooms, mazes) {\n    let connectorRegions = {}\n    Object.keys(rooms.edges)\n      .map(Cell.fromString)\n      .filter(edge => edge[0] % 2 || edge[1] % 2)\n      .forEach(edge => {\n        let regions = Cell.getNeighbors(edge)\n          .filter(neighbor => neighbor in rooms.cells || neighbor in mazes.cells)\n             .map(neighbor =>   rooms.cells[neighbor] || mazes.cells[neighbor]  )\n        if (regions.length >= 2)\n          connectorRegions[edge] = regions\n      })\n    return connectorRegions\n  }\n\n  function connect(node, next, door) {\n    connectOne(node, next, door)\n    connectOne(next, node, door)\n  }\n\n  function connectOne(node, next, door) {\n    node.neighbors.set(next, door)\n    node.doors[door] = next\n  }\n\n  function disconnect(node, next) {\n    disconnectOne(node, next)\n    disconnectOne(next, node)\n  }\n\n  function disconnectOne(node, next) {\n    let connector = node.neighbors.get(next)\n    delete node.doors[connector]\n  }\n\n}()\n\nlet fillEnds = function () {\n\n  return function fillEnds(mazes) {\n    mazes.ends = {}\n    for (let maze of mazes.list) {\n      let cells = new Set(maze.cells.map(Cell.toString))\n      let ends  = []\n      let stack = maze.ends\n      while (stack.length) {\n        let cell = stack.pop()\n        let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells || neighbor in maze.doors)\n        if (neighbors.length > 1) {\n          ends.push(cell)\n          continue\n        }\n        cells.delete(cell.toString())\n        delete mazes.cells[cell]\n        let next = neighbors[0]\n        if (next)\n          stack.unshift(next)\n      }\n      maze.cells = [...cells].map(Cell.fromString)\n      maze.ends  = ends = ends\n        .filter(cell => cell in mazes.cells && Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells).length === 1)\n      ends.forEach(cell => mazes.ends[cell] = maze)\n    }\n  }\n\n}()\n","import { Cell } from './index'\n\nexport default { get }\n\nfunction get(world, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat(getOctant(world, start, range, i))\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(world, start, range, octant) {\n  range = range || Infinity\n  let size = world.size\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          if (world.tileAt(cell).opaque) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start =  col      / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { RNG, Actor, AI, Cell, World, Gen } from './index'\n\nlet events = {}\n\nconst SUCCESS = true\nconst FAILURE = false\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET } = World.tileIds\n\nexport default { create }\n\nfunction create(size) {\n\n  let rng = RNG.create()\n  let ai  = AI.create(rng)\n\n  let index = 0\n\n  let floor\n  let world = { floors: {} }\n\n  let hero\n\n  let game = {\n    rng, world, floor: 0, hero: null,\n    start, on, off, input, emit\n  }\n\n  return game\n\n  function start() {\n    game.floor = 0\n    game.hero = hero = Actor.create({ kind: 'human', faction: 'hero' })\n    descend()\n    return game\n  }\n\n  function tick() {\n    let actor, actors = [...floor.elements].filter(element => element.type === 'actor')\n    if (!actors.length)\n      return\n    while (hero.health) {\n      index = index % actors.length\n      actor = actors[index]\n      if (actor.health) {\n        if (actor.energy < 1)\n          actor.energy += actor.speed\n        while (actor.energy >= 1) {\n          actor.look()\n          let action = actor.action\n          if (!action) {\n            if (actor === hero) {\n              emit('tick')\n              return\n            }\n            action = ai.getAction(actor)\n          }\n          let { kind, data } = action\n          let result = actor.perform(action)\n          if (result !== SUCCESS) {\n            if (!result || result === FAILURE) {\n              emit(`${kind}-fail`, actor, ...data)\n              return\n            }\n            if (result.type === 'actor') {\n              actor.attack(result)\n              kind = 'attack'\n              data = [result]\n            } else if (Cell.isCell(result)) {\n              actor.open(result)\n              kind = 'open'\n              data = [result]\n            }\n          } else {\n            if (kind === 'descend' || kind === 'ascend') {\n              actor.action = null\n              if (kind === 'descend')\n                result = descend()\n              else if (kind === 'ascend')\n                result = ascend()\n              if (result === FAILURE) {\n                emit(`${kind}-fail`, actor, ...data)\n                return\n              }\n            }\n          }\n          actor.action = null\n          actor.energy--\n          if (result !== FAILURE)\n            emit(kind, actor, ...data)\n        }\n      }\n      index++\n    }\n    hero.look()\n    emit('tick')\n  }\n\n  function on(event, callback) {\n    let callbacks = events[event]\n    if (!callbacks)\n      callbacks = events[event] = new Set\n    callbacks.add(callback)\n    return game\n  }\n\n  function off(event, callback) {\n    let callbacks = events[event]\n    if (!callbacks)\n      return false\n    callbacks.delete(callback)\n    return true\n  }\n\n  function input(kind, ...data) {\n    if (!hero.health)\n      return false\n    hero.action = { type: 'action', kind, data }\n    tick()\n    return true\n  }\n\n  function emit(event, ...data) {\n    let callbacks = events[event]\n    if (!callbacks)\n      return\n    for (let callback of callbacks)\n      callback(...data)\n  }\n\n  function descend() {\n    game.floor++\n    if (world[game.floor])\n      floor = world[game.floor]\n    else {\n      floor = Gen.createDungeon(size, rng)\n      world[game.floor] = floor\n    }\n    hero.cell = floor.entrance\n    hero.world = floor\n    hero.worldId = game.floor\n    floor.elements.add(hero)\n    tick()\n    return true\n  }\n\n  function ascend() {\n    if (!world[game.floor - 1])\n      return false\n    game.floor--\n    floor = world[game.floor]\n    hero.cell = floor.exit\n    hero.world = floor\n    hero.worldId = game.floor\n    tick()\n    return true\n  }\n\n}\n","import { Game, Cell, Color } from './utils/index'\n\nconst blessed = require('blessed')\nconst options = { smartCSR: true }\n\nlet screen = blessed.screen(options)\nscreen.title = 'Roguelike'\nconst { BLACK, MAROON, GREEN, OLIVE, NAVY, PURPLE, TEAL, SILVER, GRAY: YELLOW, RED, LIME, YELLOW: GRAY, BLUE, FUCHSIA, AQUA, WHITE } = Color\n\nconst sprites = function () {\n\n  const floor      = [183, OLIVE]\n  const wall       = ['#', PURPLE]\n  const door       = ['+', TEAL]\n  const doorOpen   = ['/', TEAL]\n  const doorSecret = wall\n  const exit       = ['>', WHITE]\n  const entrance   = ['<', WHITE]\n  const human      = ['@', WHITE]\n  const wyrm       = ['s', GREEN]\n  const corpse     = ['%', MAROON]\n\n  return { floor, wall, door, doorOpen, doorSecret, entrance, exit, human, wyrm, corpse }\n\n}()\n\nconst WORLD_SIZE = 25\nconst DISPLAY_WIDTH  = 80\nconst DISPLAY_HEIGHT = 25\n\nlet game = Game.create(WORLD_SIZE)\ngame.start()\n\nlet display = blessed.box({\n  top: 'center',\n  left: 'center',\n  width: DISPLAY_WIDTH,\n  height: DISPLAY_HEIGHT,\n  tags: true\n})\n\nscreen.append(display)\n\nlet box = blessed.box({\n  parent: display,\n  width: WORLD_SIZE,\n  height: DISPLAY_HEIGHT,\n  tags: true\n})\n\ndisplay.append(box)\n\nlet log = blessed.log({\n  left: WORLD_SIZE,\n  width: DISPLAY_WIDTH - WORLD_SIZE,\n  height: DISPLAY_HEIGHT,\n  tags: true,\n  border: {\n    type: 'line'\n  }\n})\n\ndisplay.append(log)\n\nfunction getView(actor, mouse) {\n  if (!actor)\n    throw new TypeError(`Cannot get view of actor '${actor}'`)\n  let view = ''\n  let { data, size } = actor.world\n  let mouseX, mouseY\n  if (mouse)\n    [mouseX, mouseY] = mouse\n  let y = size\n  while (y--) {\n    let row = data.slice(y * size, (y + 1) * size)\n    let line = ''\n    let x = 0\n    for (let id of row) {\n      let cell = [x, y]\n      let char = ' ', color\n      let type = actor.world.tileAt(cell).kind\n      if (actor)\n        if (actor.known[actor.worldId])\n          type = actor.known[actor.worldId][cell]\n        else\n          type = null\n      if (type) {\n        if ( !(type in sprites) ) {\n          throw new TypeError('Unrecognized sprite: ' + type)\n        }\n        [char, color] = sprites[type]\n        if (actor && !actor.seeing[cell])\n          color = GRAY\n      }\n      if (typeof char === 'number')\n        char = String.fromCharCode(char)\n      if (color)\n        if (x === mouseX && y === mouseY)\n          char = `{black-fg}{${color}-bg}${char}{/}`\n        else\n          char = `{${color}-fg}${char}{/}`\n      line += char\n      x++\n    }\n    view = line + view + '\\n'\n  }\n  return view\n}\n\nfunction render() {\n  let view = getView(hero)\n  box.setContent(view)\n  screen.render()\n}\n\nscreen.on('keypress', (char, key) => {\n  if (key.ctrl && key.name === 'c')\n    return process.exit(0)\n  if (hero.health) {\n    if (key.name in Cell.directions) {\n      let direction = Cell.directions[key.name]\n      game.input('move', direction)\n    } else if (key.ch === '>') {\n      game.input('descend')\n    } else if (key.ch === '<') {\n      game.input('ascend')\n    }else if (key.name === 'o') {\n      game.input('open')\n    } else if (key.name === 'c') {\n      game.input('close')\n    }\n  }\n})\n\nlet { hero } = game\n\n.on('tick', () => {\n  render()\n})\n\n.on('move', (actor, direction) => {\n  if (actor === hero) {\n    let elements = hero.world.elementsAt(hero.cell)\n    let corpse = elements.find(element => element.kind === 'corpse')\n    if (corpse) {\n      let origin = corpse.origin\n      let [,color] = sprites[origin]\n      log.add(`There's a corpse of a {${color}-fg}${origin}{/} lying here.`)\n    } else {\n      let tile = hero.world.tileAt(hero.cell)\n      if (tile.kind === 'entrance')\n        log.add(`There's a set of stairs going back up here.`)\n      else if (tile.kind === 'exit')\n        log.add(`There's a staircase going down here.`)\n    }\n  }\n})\n\n.on('attack', (actor, target) => {\n  if (actor === hero) {\n    if (!target.health) {\n      log.add(`{${RED}-fg}You slay the ${target.kind}!{/}`)\n    } else {\n      log.add(`{${RED}-fg}You whack the ${target.kind}.{/}`)\n    }\n  } else if (target === hero) {\n    if (!hero.health) {\n      log.add(`{${RED}-fg}The ${actor.kind} kills you!{/}`)\n    } else {\n      log.add(`{${YELLOW}-fg}The ${actor.kind} attacks you.{/}`)\n    }\n  }\n})\n\n.on('open', (actor, door, secret) => {\n  if (actor === hero) {\n    if (secret)\n      log.add(`{${YELLOW}-fg}You find a secret room!{/}`)\n    else\n      log.add('You open the door.')\n  }\n})\n\n.on('close', (actor, doors) => {\n  if (actor === hero)\n    log.add(`You close the door.`)\n})\n\n.on('close-fail', actor => {\n  if (actor === hero)\n    log.add(`No doors to close!`)\n})\n\n.on('descend', actor => {\n  if (actor === hero) {\n    log.add(`You head down the staircase to {${YELLOW}-fg}Floor ${game.floor}{/}.`)\n    screen.render()\n  }\n})\n\n.on('descend-fail', actor => {\n  if (actor === hero) {\n    log.add(`There's nowhere to go down here!`)\n    screen.render()\n  }\n})\n\n.on('ascend', actor => {\n  if (actor === hero) {\n    log.add(`You go back upstairs to {${YELLOW}-fg}Floor ${game.floor}{/}.`)\n    screen.render()\n  }\n})\n\n.on('ascend-fail', actor => {\n  if (actor === hero) {\n    log.add(`There's nowhere to go up here!`)\n    screen.render()\n  }\n})\n\nrender()\n"],"names":["names","values","MAP","map","index","name","NAME","toUpperCase","Color","Object","assign","RNG","create","initialSeed","isNaN","Math","random","currentSeed","get","choose","seed","min","max","a","arguments","length","x","sin","floor","Array","isArray","array","newSeed","directions","left","upLeft","up","upRight","right","downRight","down","downLeft","cardinalDirections","isEqual","isEdge","isInside","isNeighbor","toString","fromString","toIndex","fromIndex","getNeighbors","getManhattan","getDistance","isCell","value","filter","b","cell","size","y","rect","rectX","rectY","rectWidth","rectHeight","other","cx","cy","ox","oy","dx","abs","dy","string","split","Number","diagonals","step","TypeError","neighbors","dirs","key","current","push","ax","ay","bx","by","sqrt","squared","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","i","exclusive","aw","ah","bw","bh","w","h","edges","r","concat","cells","tileData","tiles","tile","type","id","props","kind","splice","prop","tileIds","reduce","result","char","CHAR","join","tileCosts","cost","walkable","door","Infinity","secret","FLOOR","WALL","ENTRANCE","EXIT","data","Uint8ClampedArray","world","elements","Set","entrance","exit","tileAt","elementsAt","setAt","fill","clear","spawn","kill","findPath","getAt","Cell","element","Rect","rooms","add","delete","start","goal","costs","path","startKey","goalKey","opened","closed","scores","f","g","parent","sort","cellKey","pop","unshift","neighbor","tileCost","cellCost","includes","World","DOOR","DOOR_OPEN","DOOR_SECRET","options","actor","look","perform","move","moveTo","attack","collect","open","close","descend","ascend","FOV","seeing","known","worldId","direction","cellX","cellY","distX","distY","target","entities","items","next","forEach","nextX","nextY","dist","health","item","action","rng","getAction","room","normal","createDungeon","RangeError","findRooms","mazes","findMazes","doors","findDoors","list","maze","cellId","regions","ends","flags","has","center","Actor","faction","speed","findRoom","worldSize","findRoomSize","findRoomPosition","roomSize","area","matrices","fails","valid","shape","matrix","edge","sharedEdges","nodes","findNodes","node","stack","backtracking","mid","midX","midY","addEnd","offset","half","nodeX","nodeY","addCell","connectorRegions","getConnectors","mainRegion","dead","region","Map","connectors","find","nearby","connectorIds","entries","keys","connect","connectOne","set","disconnect","disconnectOne","connector","fillEnds","range","getOctant","octant","shadows","fullShadow","row","transformOctant","transformX","transformY","col","projection","getProjection","visible","shadow","end","opaque","prev","overPrev","overNext","events","SUCCESS","FAILURE","ai","AI","floors","hero","game","on","off","input","emit","tick","actors","energy","event","callback","callbacks","Gen","blessed","require","smartCSR","screen","title","MAROON","GREEN","OLIVE","PURPLE","TEAL","YELLOW","GRAY","RED","WHITE","sprites","wall","doorOpen","doorSecret","human","wyrm","corpse","WORLD_SIZE","DISPLAY_WIDTH","DISPLAY_HEIGHT","Game","display","box","append","log","getView","mouse","view","mouseX","mouseY","slice","line","color","String","fromCharCode","render","setContent","ctrl","process","ch","origin"],"mappings":"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"}