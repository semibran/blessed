{"version":3,"file":"index.js","sources":["src/utils/rng.js","src/utils/fov.js","src/utils/entity.js","src/utils/world.js","src/utils/gen.js","src/utils/cell.js","src/utils/rect.js","src/utils/color.js","src/index.js"],"sourcesContent":["let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if ( isNaN(initialSeed) )\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1) {\n      if ( !isNaN(min) )\n        max = min, min = 0\n      else if ( Array.isArray(min) )\n        [min, max] = min\n    }\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor( get() * (max - min) ) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if ( !isNaN(array) )\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[ get(array.length) ]\n  }\n\n  function seed(newSeed) {\n    if ( !isNaN(newSeed) )\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","import { Cell } from './index'\n\nexport default { get }\n\nfunction get(world, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat(getOctant(world, start, range, i))\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(world, start, range, octant) {\n  range = range || Infinity\n  let size = world.size\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          if (world.tileAt(cell).opaque) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start =  col      / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","import { Cell, World, FOV } from './index'\n\nexport default { create }\n\nfunction create(options) {\n\n  let entity = {\n    entityType: null,\n    kind: null\n  }\n\n  let props = {\n    type: 'entity',\n    wandering: true,\n    health: 1,\n    seeing: {},\n    known: {},\n    world: null,\n    cell: null\n  }\n\n  Object.assign(entity, options, props)\n\n  let path = null\n\n  function look() {\n    let cells = FOV.get(entity.world, entity.cell, 7)\n    entity.seeing = {}\n    if (!entity.known[entity.world.id])\n      entity.known[entity.world.id] = {}\n    for (var cell of cells) {\n      let kind = entity.world.tileAt(cell).kind\n      let other = entity.world.elementsAt(cell)[0]\n      if (other)\n        kind = other.kind\n      entity.known[entity.world.id][cell] = kind\n      entity.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let moved = false\n    let [cellX, cellY] = entity.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let tile = entity.world.tileAt(target)\n    let elements = entity.world.elementsAt(target)\n    let entities = elements.filter(element => element.type === 'entity')\n    let items    = elements.filter(element => element.type === 'item')\n    if (entities.length) {\n      let enemy = entities[0]\n      attack(enemy)\n    } else if (tile.walkable) {\n      if (!entities.length) {\n        entity.cell = target\n        if (items.length) {\n          let item = items[0]\n          entity.collect(item)\n        } else {\n          moved = true\n        }\n        look()\n      }\n    } else if (tile.door) {\n      entity.world.setAt(target, World.tileIds.DOOR_OPEN)\n      look()\n    }\n    return moved\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target ) {\n      let cells = {}\n      let entities = [...entity.world.elements].filter(element => element.type === 'entity')\n      entity.world.data.forEach((id, index) => {\n        let cell = Cell.fromIndex(index, entity.world.size)\n        if (!entity.known[entity.world.id][cell] || entities.filter(entity => Cell.isEqual(entity.cell, cell)).length)\n          cells[cell] = Infinity\n      })\n      path = entity.world.findPath(entity.cell, target, { cells })\n    }\n    if (!path)\n      return false\n    let next\n    path.some((cell, index) => {\n      if ( !Cell.isEqual(entity.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = entity.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return entity.move(dist)\n  }\n\n  function attack(other) {\n    other.health--\n    if (other.health <= 0){\n      entity.world.kill(other)\n      look()\n    }\n  }\n\n  function collect(item) {\n    if ( Cell.isEqual(entity.cell, item.cell) ) {\n      entity.world.kill(item)\n      entity.world.emit('item', entity, item)\n    }\n  }\n\n  let methods = { look, move, moveTo, attack, collect }\n  return Object.assign(entity, methods)\n}\n","import { Cell, Rect } from './index'\n\nconst tileData = [\n  'floor walkable',\n  'wall opaque',\n  'door opaque door',\n  'doorOpen walkable door',\n  'doorSecret opaque door secret',\n  'entrance walkable stairs',\n  'exit walkable stairs'\n]\n\nconst tiles = function (tileData) {\n  let tiles = []\n  let i = tileData.length\n  while (i--) {\n    let tile  = tiles[i] = { type: 'tile', id: i }\n    let props = tileData[i].split(' ')\n    let kind  = tile.kind = props.splice(0, 1)[0]\n    for (let prop of props)\n      tile[prop] = true\n  }\n  return tiles\n}(tileData)\n\nconst tileIds = function (tiles) {\n  let tileIds = {}\n  let i = 0\n  for (let tile of tiles) {\n    let id = tile.kind.split('').reduce((result, char, index) => {\n      let CHAR = char.toUpperCase()\n      if (char === CHAR || !index)\n        result[result.length] = ''\n      result[result.length - 1] += CHAR\n      return result\n    }, []).join('_')\n    tileIds[id] = i\n    i++\n  }\n  return tileIds\n}(tiles)\n\nconst tileCosts = function (tiles) {\n  let tileCosts = []\n  for (let tile of tiles) {\n    let cost = 0\n    if (!tile.walkable && !tile.door)\n      cost = Infinity\n    if (tile.secret)\n      cost = 1000\n    if (tile.door) {\n      cost++\n      if (!tile.walkable)\n        cost++\n    }\n    tileCosts.push(cost)\n  }\n  return tileCosts\n}(tiles)\n\nconst { FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT } = tileIds\n\nexport default { create, tiles, tileIds, tileCosts }\n\nfunction create(size, id) {\n\n  let data  = new Uint8ClampedArray(size * size)\n  let world = {\n\n    // Properties\n    size, data, elements: new Set, id: id || null, entrance: null, exit: null,\n\n    // Methods\n    getAt, tileAt, elementsAt, setAt, fill, clear, spawn, kill, findPath\n\n  }\n\n  return world\n\n  function getAt(cell) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    return data[index]\n  }\n\n  function tileAt(cell) {\n    return tiles[getAt(cell)]\n  }\n\n  function elementsAt(cell) {\n    return [...world.elements].filter(element => Cell.isEqual(cell, element.cell))\n  }\n\n  function setAt(cell, value) {\n    if (!Cell.isInside(cell, size))\n      return null\n    let index = Cell.toIndex(cell, size)\n    data[index] = value\n    return value\n  }\n\n  function fill(value, rect) {\n    if (typeof value === 'undefined')\n      value = WALL\n    if (rect) {\n      let cells = Rect.getCells(rect)\n      for (let cell of cells)\n        setAt(data, cell, value)\n    } else {\n      let i = data.length\n      while (i--)\n        data[i] = value\n    }\n    return world\n  }\n\n  function clear() {\n    fill(FLOOR)\n    return world\n  }\n\n  function spawn(element, cell) {\n    if (!world.rooms || !element || !cell)\n      return null\n    if (element in tiles) {\n      setAt(cell, element)\n      if (element === ENTRANCE)\n        world.entrance = cell\n      if (element === EXIT)\n        world.exit = cell\n    } else if (typeof element === 'object') {\n      element.world = world\n      element.cell  = cell\n      world.elements.add(element)\n    }\n    return cell\n  }\n\n  function kill(element) {\n    elements.remove(element)\n  }\n\n  function findPath(start, goal, costs, diagonals) {\n    \n    if (!costs)\n      costs = {}\n\n    if (!costs.tiles)\n      costs.tiles = tileCosts\n\n    if (!costs.cells)\n      costs.cells = {}\n\n    let path = []\n\n    let startKey = start.toString()\n    let goalKey  = goal.toString()\n\n    let opened = [startKey]\n    let closed = {}\n\n    let scores = { f: {}, g: {} }\n    let parent = {}\n\n    let cells = data.map((id, index) => Cell.fromIndex(index, size))\n    for (let cell of cells) {\n      scores.g[cell] = Infinity\n      scores.f[cell] = Infinity\n    }\n\n    scores.g[start] = 0\n    scores.f[start] = Cell.getManhattan(start, goal)\n\n    while (opened.length) {\n      if (opened.length > 1)\n        opened = opened.sort( (a, b) => scores.f[b] - scores.f[a] )\n      let cellKey = opened.pop()\n      let cell = Cell.fromString(cellKey)\n      if (cellKey === goalKey) {\n        let cell = goal\n        do {\n          path.unshift(cell)\n          cell = parent[cell]\n        } while (cell)\n        return path\n      }\n      closed[cell] = true\n      for ( let neighbor of Cell.getNeighbors(cell, diagonals) ) {\n        if (!Cell.isInside(neighbor, size) || neighbor in closed)\n          continue\n        let key = neighbor.toString()\n        let tileCost = costs.tiles[getAt(neighbor)] || 0\n        let cellCost = costs.cells[neighbor] || 0\n        let cost = tileCost + cellCost\n        if (cost === Infinity && key !== goalKey)\n          continue\n        let g = scores.g[cell] + 1 + cost\n        if ( !opened.includes(key) )\n          opened.push(key)\n        else if ( g >= scores.g[neighbor] )\n          continue\n        parent[neighbor] = cell\n        scores.g[neighbor] = g\n        scores.f[neighbor] = g + Cell.getManhattan(neighbor, goal)\n      }\n    }\n\n    return null\n\n  }\n\n}\n","import { RNG, World, Cell, Rect } from './index'\n\nconst { FLOOR, DOOR, DOOR_SECRET, ENTRANCE, EXIT } = World.tileIds\n\nlet rng = RNG.create()\n\nexport default { createDungeon }\n\nfunction createDungeon(size, seed, hero, id) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  if (typeof seed === 'object') {\n    rng = seed\n    seed = rng.seed()\n  } else if ( isNaN(seed) ) {\n    seed = rng.get()\n    rng.seed(seed)\n  }\n\n  // console.log('Seed:', seed)\n\n  let world = World.create(size, id).fill()\n  let data = world.data\n\n  let rooms = findRooms(size)\n  let mazes = findMazes(size, rooms)\n  let doors = findDoors(rooms, mazes)\n  fillEnds(mazes)\n\n  for (let room of rooms.list)\n    for (let cell of room.cells)\n      world.setAt(cell, FLOOR)\n\n  for (let maze of mazes.list)\n    for (let cell of maze.cells)\n      world.setAt(cell, FLOOR)\n\n  for (let cellId in doors) {\n    let cell = Cell.fromString(cellId)\n    let type = DOOR\n    let regions = doors[cellId]\n    let room = regions.sort((a, b) => a.neighbors.size - b.neighbors.size)[0]\n    let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.ends)\n    if (!neighbors.length && room.neighbors.size === 1 && rng.choose()) {\n      type = DOOR_SECRET\n      rooms.normal.delete(room)\n      rooms.secret.add(room)\n    } else if (rng.choose())\n      type = FLOOR\n    world.setAt(cell, type)\n  }\n\n  world.rooms = rooms\n\n  function spawn(element, flags) {\n\n    let rooms, cell\n\n    if (!flags)\n      flags = []\n    else {\n      if (typeof flags === 'string')\n        flags = flags.split(' ')\n      else if (Array.isArray(flags)) {\n        cell = flags\n        flags = []\n      }\n    }\n    flags = new Set(flags)\n\n    if (!cell) {\n      if (flags.has('secret'))\n        rooms = world.rooms.secret\n      else\n        rooms = world.rooms.normal\n\n      let room = rng.choose([...rooms])\n      if (flags.has('center'))\n        cell = room.center\n      else {\n        do {\n          cell = rng.choose(room.cells)\n        } while (world.getAt(cell) !== FLOOR || world.elementsAt(cell).length)\n      }\n    }\n\n    world.spawn(element, cell)\n\n    return cell\n\n  }\n\n  if (hero) {\n    let cell = spawn(hero, 'center')\n    spawn(ENTRANCE, cell)\n  }\n  spawn(EXIT, 'center')\n\n  return world\n}\n\nlet findRooms = function () {\n\n  let findRoom = function () {\n\n    return function findRoom(min, max, worldSize) {\n      let w = findRoomSize(min, max)\n      let h = findRoomSize(min, max)\n      let x = findRoomPosition(w, worldSize)\n      let y = findRoomPosition(h, worldSize)\n      return [x, y, w, h]\n    }\n\n    function findRoomSize(min, max) {\n      return rng.get((max - min) / 2 + 1) * 2 + min\n    }\n\n    function findRoomPosition(roomSize, worldSize) {\n      return rng.get((worldSize - roomSize) / 2) * 2 + 1\n    }\n\n  }()\n\n  return function findRooms(size) {\n    let area = size * size\n    let rooms = { list: [], normal: new Set, secret: new Set, cells: {}, edges: {} }\n    let matrices = {}\n    let fails = 0\n    let valid = true\n    while (valid) {\n      let shape, matrix, cells, center\n      do {\n        shape  = 'rect'\n        matrix = findRoom(3, 9, size)\n        if (matrix in matrices)\n          valid = false\n        else {\n          cells = Rect.getCells(matrix)\n          center = Rect.getCenter(matrix)\n          valid = matrices[matrix] = !isIntersecting(rooms, cells)\n        }\n        if (valid)\n          break\n        fails++\n      } while (fails < size * 2)\n      if (!valid)\n        break\n      let edges  = Rect.getEdges(matrix, true)\n      let room = { type: 'room', shape, matrix, cells, edges, center }\n      rooms.normal.add(room)\n      rooms.list.push(room)\n      for (let cell of cells)\n        rooms.cells[cell] = room\n      for (let edge of edges) {\n        if (!rooms.edges[edge])\n          rooms.edges[edge] = []\n        let sharedEdges = rooms.edges[edge]\n        sharedEdges.push(room)\n      }\n    }\n    return rooms\n  }\n\n  function isIntersecting(rooms, cells) {\n    for (let cell of cells)\n      if (cell in rooms.cells)\n        return true\n    return false\n  }\n\n}()\n\nlet findMazes = function () {\n\n  return function findMazes(size, rooms, step) {\n    step = step || 2\n    let mazes = { list: [], cells: {}, ends: {} }\n    let nodes = new Set(findNodes(size)\n      .filter(node => !(node in rooms.cells) && !Cell.getNeighbors(node, true).filter(neighbor => neighbor in rooms.cells).length)\n      .map(Cell.toString))\n    while (nodes.size) {\n      let start = Cell.fromString(rng.choose( [...nodes] ))\n      let stack = [start]\n      let maze = { type: 'maze', cells: [], ends: [] }\n      let backtracking = true\n      while (stack.length) {\n        let cell, [cellX, cellY] = cell = stack[stack.length - 1]\n        addCell(mazes, maze, cell)\n        nodes.delete(cell.toString())\n        let neighbors = Cell.getNeighbors(cell, false, step).filter(neighbor => nodes.has(neighbor.toString()))\n        if (neighbors.length) {\n          let next = rng.choose(neighbors)\n          let [nextX, nextY] = next\n          let [cellX, cellY] = cell\n          let mid, [midX, midY] = mid = [cellX + (nextX - cellX) / step, cellY + (nextY - cellY) / step]\n          addCell(mazes, maze, mid)\n          stack.push(next)\n          backtracking = false\n          if (cell === start && !backtracking)\n            addEnd(mazes, maze, cell)\n        } else {\n          if (!backtracking)\n            addEnd(mazes, maze, cell)\n          backtracking = true\n          stack.pop()\n        }\n      }\n      mazes.list.push(maze)\n    }\n    return mazes\n  }\n\n  function findNodes(worldSize, offset) {\n    offset = offset || 0\n    let nodes = []\n    let half = (worldSize - 1) / 2 - offset\n    let i = half * half\n    while (i--) {\n      let [nodeX, nodeY] = Cell.fromIndex(i, half)\n      let node = [nodeX * 2 + 1 + offset, nodeY * 2 + 1 + offset]\n      let neighbors = null\n      nodes.push(node)\n    }\n    return nodes\n  }\n\n  function addCell(mazes, maze, cell) {\n    maze.cells.push(cell)\n    mazes.cells[cell] = maze\n  }\n\n  function addEnd(mazes, maze, cell) {\n    maze.ends.push(cell)\n    mazes.ends[cell] = maze\n  }\n\n}()\n\nlet findDoors = function () {\n\n  return function findDoors(rooms, mazes) {\n\n    let connectorRegions = getConnectors(rooms, mazes)\n\n    let start = rng.choose(rooms.list)\n    let stack = [start]\n    let doors = {}\n    let mainRegion = new Set\n    let dead = new Set\n\n    let regions = rooms.list.concat(mazes.list)\n    for (let region of regions) {\n      region.neighbors = new Map\n      region.doors = {}\n    }\n\n    while (stack.length) {\n      let node = stack[stack.length - 1]\n      mainRegion.add(node)\n\n      let connectors\n      if (node.type === 'room')\n        connectors = node.edges.filter(cell => {\n          if (!(cell in connectorRegions))\n            return false\n          let next = connectorRegions[cell].find(region => region !== node)\n          return !dead.has(next) && next.cells.length > 1\n        })\n      else if (node.type === 'maze')\n        connectors = node.cells.reduce((result, cell) => {\n          return result.concat(Cell.getNeighbors(cell).filter(neighbor => neighbor in connectorRegions))\n        }, [])\n      connectors = connectors.filter(cell => {\n        let next = connectorRegions[cell].find(region => region !== node)\n        let nearby = Cell.getNeighbors(cell, true).filter(neighbor => neighbor in doors)\n        return !(cell in doors) && !node.neighbors.has(next) && (!mainRegion.has(next) || rng.choose(10)) && !nearby.length\n      })\n\n      let connectorIds = connectors.map(Cell.toString)\n\n      if (connectors.length) {\n        let door = rng.choose(connectors)\n        let regions = connectorRegions[door]\n        let next = regions.find(region => region !== node)\n        for (let cell of next.cells) {\n          Cell.getNeighbors(cell).forEach(neighbor => {\n            if (connectorIds.includes(neighbor.toString())) {\n              delete connectorRegions[neighbor]\n            }\n          })\n        }\n        stack.push(next)\n        doors[door] = regions\n        mainRegion.add(node)\n        connect(node, next, door)\n      } else {\n        stack.pop()\n        if (node.type === 'maze' && node.neighbors.size === 1) {\n          let next = node.neighbors.entries().next().value[0]\n          let cell = node.neighbors.get(next)\n          delete doors[cell]\n          disconnect(node, next)\n          mainRegion.delete(node)\n          dead.add(node)\n        }\n      }\n    }\n\n    return doors\n\n  }\n\n  function getConnectors(rooms, mazes) {\n    let connectorRegions = {}\n    Object.keys(rooms.edges)\n      .map(Cell.fromString)\n      .filter(edge => edge[0] % 2 || edge[1] % 2)\n      .forEach(edge => {\n        let regions = Cell.getNeighbors(edge)\n          .filter(neighbor => neighbor in rooms.cells || neighbor in mazes.cells)\n             .map(neighbor =>   rooms.cells[neighbor] || mazes.cells[neighbor]  )\n        if (regions.length >= 2)\n          connectorRegions[edge] = regions\n      })\n    return connectorRegions\n  }\n\n  function connect(node, next, door) {\n    connectOne(node, next, door)\n    connectOne(next, node, door)\n  }\n\n  function connectOne(node, next, door) {\n    node.neighbors.set(next, door)\n    node.doors[door] = next\n  }\n\n  function disconnect(node, next) {\n    disconnectOne(node, next)\n    disconnectOne(next, node)\n  }\n\n  function disconnectOne(node, next) {\n    let connector = node.neighbors.get(next)\n    delete node.doors[connector]\n  }\n\n}()\n\nlet fillEnds = function () {\n\n  return function fillEnds(mazes) {\n    mazes.ends = {}\n    for (let maze of mazes.list) {\n      let cells = new Set(maze.cells.map(Cell.toString))\n      let ends  = []\n      let stack = maze.ends\n      while (stack.length) {\n        let cell = stack.pop()\n        let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells || neighbor in maze.doors)\n        if (neighbors.length > 1) {\n          ends.push(cell)\n          continue\n        }\n        cells.delete(cell.toString())\n        delete mazes.cells[cell]\n        let next = neighbors[0]\n        if (next)\n          stack.unshift(next)\n      }\n      maze.cells = [...cells].map(Cell.fromString)\n      maze.ends  = ends = ends\n        .filter(cell => cell in mazes.cells && Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells).length === 1)\n      ends.forEach(cell => mazes.ends[cell] = maze)\n    }\n  }\n\n}()\n","const directions = {\n  left:      [-1,  0],\n  upLeft:    [-1, -1],\n  up:        [ 0, -1],\n  upRight:   [ 1, -1],\n  right:     [ 1,  0],\n  downRight: [ 1,  1],\n  down:      [ 0,  1],\n  downLeft:  [-1,  1]\n}\nconst { left, upLeft, up, upRight, right, downRight, down, downLeft } = directions\nconst cardinalDirections = { left, up, right, down }\n\nconst Cell = {\n\n  // Constants\n  left, right, up, down, upLeft, upRight, downLeft, downRight, directions, cardinalDirections,\n\n  // Methods\n  toString, fromString, toIndex, fromIndex, isEqual, isEdge, isInside, getNeighbors, getManhattan, getDistance\n\n}\n\nexport default Cell\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return isInside(cell, size) && (x === rectX || x === rectX + rectWidth - 1 || y === rectY || y === rectY + rectHeight - 1)\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!cell)\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let dirs = cardinalDirections\n  if (diagonals)\n    dirs = directions\n  for (let key in dirs) {\n    let [dx, dy] = dirs[key]\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  let [ax, ay] = a\n  let [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n\nfunction getDistance(a, b, sqrt) {\n  if (typeof sqrt === 'undefined')\n    sqrt = true\n  let [ax, ay] = a\n  let [bx, by] = b\n  let [dx, dy] = [bx - ax, by - ay]\n  let squared  = dx * dx + dy * dy\n  if (sqrt)\n    return Math.sqrt(squared)\n  return squared\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","const names  = [  'black',  'maroon',   'green',   'olive',    'navy',  'purple',    'teal',  'silver',    'gray',     'red',    'lime',  'yellow',    'blue', 'fuchsia',    'aqua',   'white']\nconst values = ['#000000', '#800000', '#008000', '#808000', '#000080', '#800080', '#008080', '#c0c0c0', '#808080', '#ff0000', '#00ff00', '#ffff00', '#0000ff', '#ff00ff', '#00ffff', '#ffffff']\n\nlet MAP = {}\nlet map = {}\n\nlet index = 0\nfor (let name of names) {\n  let NAME  = name.toUpperCase()\n  MAP[NAME] = values[index]\n  map[name] = values[index++]\n}\n\nlet Color = Object.assign({ names, values, map }, MAP)\n\nexport default Color\n","import { RNG, FOV, Entity, World, Gen, Cell, Color } from './utils/index'\n\nconst blessed = require('blessed')\n\nconst options = { smartCSR: true }\n\nlet screen = blessed.screen(options)\nscreen.title = 'Hello world!'\n\nlet { BLACK, MAROON, GREEN, OLIVE, NAVY, PURPLE, TEAL, SILVER, GRAY: YELLOW, RED, LIME, YELLOW: GRAY, BLUE, FUCHSIA, AQUA, WHITE } = Color\n\nconst sprites = function () {\n\n  const floor      = [183, TEAL]\n  const wall       = ['#', OLIVE]\n  const door       = ['+', MAROON]\n  const doorOpen   = ['/', MAROON]\n  const doorSecret = wall\n  const entrance   = ['<', WHITE]\n  const exit       = ['>', WHITE]\n  const human      = ['@', WHITE]\n\n  return { floor, wall, door, doorOpen, doorSecret, entrance, exit, human }\n\n}()\n\nfunction render(world, entity, mouse) {\n  let view = ''\n  let { data, size } = world\n  let mouseX, mouseY\n  if (mouse)\n    [mouseX, mouseY] = mouse\n  let y = size\n  while (y--) {\n    let row = data.slice(y * size, (y + 1) * size)\n    let line = ''\n    let x = 0\n    for (let id of row) {\n      let cell = [x, y]\n      let char = ' ', color\n      let type = World.tiles[id].name\n      if (entity)\n        type = entity.known[world.id][cell]\n      if (type) {\n        if ( !(type in sprites) ) {\n          throw new TypeError('Unrecognized sprite: ' + type)\n        }\n        [char, color] = sprites[type]\n        if (entity && !entity.seeing[cell])\n          color = GRAY\n      }\n      if (typeof char === 'number')\n        char = String.fromCharCode(char)\n      if (color)\n        if (x === mouseX && y === mouseY)\n          char = `{black-fg}{${color}-bg}${char}{/}`\n        else\n          char = `{${color}-fg}${char}{/}`\n      line += '{black-bg}' + char + '{/}'\n      x++\n    }\n    view = line + view + '\\n'\n  }\n  return view\n}\n\nlet rng = RNG.create()\n\nlet floors = {}\nlet floor = 0\nlet world\nlet hero = Entity.create( { kind: 'human', faction: 'hero' } )\nlet mouse = null\nlet moving = false\n\nfunction ascend() {\n  let newFloor = floor - 1\n  if (!floors[newFloor])\n    log.add(`You can't leave the dungeon.`)\n  else {\n    floor = newFloor\n    hero.world = world = floors[floor]\n    hero.cell = world.exit\n    hero.look()\n    log.add(`You go back upstairs to Floor ${floor}.`)\n  }\n  rerender()\n}\n\nfunction descend() {\n  floor++\n  if (!floors[floor]) {\n    world = Gen.createDungeon(25, rng, hero, floor)\n    hero.look()\n    floors[floor] = world\n    if (floor === 1)\n      log.add(`{${YELLOW}-fg}Welcome to the Dungeon!{/}`)\n    else\n      log.add(`You head downstairs to {${YELLOW}-fg}Floor ${floor}{/}.`)\n  } else {\n    hero.world = world = floors[floor]\n    hero.cell = world.entrance\n    hero.look()\n    log.add(`You head back downstairs to {${YELLOW}-fg}Floor ${floor}{/}.`)\n  }\n  rerender()\n}\n\nfunction move(direction) {\n  hero.move(direction)\n  rerender()\n}\n\nfunction rerender() {\n  box.setContent(render(world, hero, mouse))\n  screen.render()\n}\n\nlet box = blessed.box({\n  top: 'center',\n  left: 'center',\n  width: 25,\n  height: 25,\n  tags: true\n})\n\nlet log = blessed.log({\n  bottom: 0,\n  width: '100%',\n  height: 7,\n  tags: true,\n  border: {\n    type: 'line'\n  }\n})\n\nbox.on('mousemove', event => {\n  mouse = [event.x - box.aleft, event.y - box.atop]\n  rerender()\n})\n\nbox.on('click', event => {\n  mouse = [event.x - box.aleft, event.y - box.atop]\n\n  let target = [event.x - box.aleft, event.y - box.atop]\n\n  if (moving) {\n    moving = false\n    return\n  }\n\n  if (Cell.isEqual(hero.cell, target)) {\n    let tile = world.tileAt(hero.cell)\n    if (tile.kind === 'entrance')\n      ascend()\n    else if (tile.kind === 'exit')\n      descend()\n    return\n  }\n\n  function step() {\n    if (!moving)\n      return\n    let moved = moving = hero.moveTo(target)\n    if (moved)\n      setTimeout(step, 1000 / 30)\n    rerender()\n  }\n  moving = true\n  step()\n\n})\n\nbox.on('mouseout', event => {\n  mouse = null\n  rerender()\n})\n\nconst directions = Cell.directions\nconst WASD = {\n  w: directions.up,\n  a: directions.left,\n  s: directions.down,\n  d: directions.right\n}\n\nscreen.on('keypress', (ch, key) => {\n\n  if (key.name === 'escape' || key.ctrl && key.name === 'c')\n    return process.exit(0)\n\n  if (!moving) {\n    if (key.name in directions)\n      move(directions[key.name])\n    else if (key.name in WASD)\n      move(WASD[key.name])\n  }\n\n  let tile = world.tileAt(hero.cell)\n  if (key.ch === '<' && tile.kind === 'entrance')\n    ascend()\n  else if (key.ch === '>' && tile.kind === 'exit')\n    descend()\n\n})\n\nscreen.append(box)\nscreen.append(log)\n\ndescend()\n"],"names":["RNG","create","initialSeed","isNaN","Math","random","currentSeed","get","choose","seed","min","max","a","arguments","length","x","sin","floor","Array","isArray","array","newSeed","world","start","range","cells","i","concat","getOctant","push","octant","Infinity","size","y","shadows","fullShadow","row","transformOctant","transformX","transformY","cell","Cell","isInside","col","projection","getProjection","visible","find","shadow","end","tileAt","opaque","index","prev","next","overPrev","overNext","splice","options","entity","props","assign","path","look","FOV","seeing","known","id","kind","other","elementsAt","move","direction","moved","cellX","cellY","distX","distY","target","tile","elements","entities","filter","element","type","items","enemy","walkable","item","collect","door","setAt","World","tileIds","DOOR_OPEN","moveTo","data","forEach","fromIndex","isEqual","findPath","some","nextX","nextY","dist","attack","health","kill","emit","methods","Object","tileData","tiles","split","prop","reduce","result","char","CHAR","toUpperCase","join","tileCosts","cost","secret","FLOOR","WALL","ENTRANCE","EXIT","Uint8ClampedArray","Set","entrance","exit","fill","clear","spawn","getAt","toIndex","value","rect","Rect","getCells","rooms","add","remove","goal","costs","diagonals","startKey","toString","goalKey","opened","closed","scores","f","g","parent","map","getManhattan","sort","b","cellKey","pop","fromString","unshift","getNeighbors","neighbor","key","tileCost","cellCost","includes","DOOR","DOOR_SECRET","rng","createDungeon","hero","RangeError","findRooms","mazes","findMazes","doors","findDoors","list","room","maze","cellId","regions","neighbors","ends","normal","delete","flags","has","center","findRoom","worldSize","w","findRoomSize","h","findRoomPosition","roomSize","area","edges","matrices","fails","valid","shape","matrix","getCenter","isIntersecting","getEdges","edge","sharedEdges","step","nodes","findNodes","node","stack","backtracking","mid","midX","midY","addEnd","offset","half","nodeX","nodeY","addCell","connectorRegions","getConnectors","mainRegion","dead","region","Map","connectors","nearby","connectorIds","entries","keys","connect","connectOne","set","disconnect","disconnectOne","connector","fillEnds","directions","left","upLeft","up","upRight","right","downRight","down","downLeft","cardinalDirections","isEdge","getDistance","string","Number","rectX","rectY","rectWidth","rectHeight","TypeError","dirs","dx","dy","current","cx","cy","ax","ay","bx","by","abs","sqrt","squared","getCorners","getBorder","exclusive","aw","ah","bw","bh","r","names","values","MAP","name","NAME","Color","blessed","require","smartCSR","screen","title","MAROON","OLIVE","TEAL","YELLOW","GRAY","WHITE","sprites","wall","doorOpen","doorSecret","human","render","mouse","view","mouseX","mouseY","slice","line","color","String","fromCharCode","floors","Entity","faction","moving","ascend","newFloor","log","descend","Gen","rerender","setContent","box","on","event","aleft","atop","setTimeout","WASD","ch","ctrl","process","append"],"mappings":"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"}