{"version":3,"file":"index.js","sources":["src/utils/rng.js","src/utils/fov.js","src/utils/cell.js","src/utils/rect.js","src/utils/gen.js","src/utils/color.js","src/utils/entity.js","src/index.js"],"sourcesContent":["let RNG = create()\nRNG.create = create\n\nexport default RNG\n\nfunction create(initialSeed) {\n\n  if ( isNaN(initialSeed) )\n    initialSeed = Math.random() * 10000\n\n  let currentSeed = initialSeed\n\n  return { get, choose, seed }\n\n  function get(min, max) {\n    var a = arguments.length\n    if (a === 0) {\n      let x = Math.sin(currentSeed++) * 10000\n      return x - Math.floor(x)\n    } else if (a === 1) {\n      if ( !isNaN(min) )\n        max = min, min = 0\n      else if ( Array.isArray(min) )\n        [min, max] = min\n    }\n    if (min > max)\n      [min, max] = [max, min]\n    return Math.floor( get() * (max - min) ) + min\n  }\n\n  function choose(array) {\n    if (Array.isArray(array) && !array.length)\n      return null\n    if ( !isNaN(array) )\n      return !get(array)\n    if (!array)\n      array = [0, 1]\n    return array[ get(array.length) ]\n  }\n\n  function seed(newSeed) {\n    if ( !isNaN(newSeed) )\n      initialSeed = currentSeed = newSeed\n    return currentSeed\n  }\n\n}\n","import { Cell, Gen } from './index'\n\nexport default { get }\n\nfunction get(data, start, range) {\n  let cells = []\n  let i = 8\n  while (i--)\n    cells = cells.concat( getOctant(data, start, range, i) )\n  cells.push(start)\n  return cells\n}\n\nfunction getOctant(data, start, range, octant) {\n  range = range || Infinity\n  let size = Gen.getSize(data)\n  let [x, y] = start\n  let cells = []\n  let shadows = []\n  let fullShadow = false\n  for (let row = 1; row <= range; row++) {\n    let [transformX, transformY] = transformOctant(row, 0, octant)\n    let cell = [x + transformX, y + transformY]\n    if ( !Cell.isInside(cell, size) )\n      break\n    for (let col = 0; col <= row; col++) {\n      let [transformX, transformY] = transformOctant(row, col, octant)\n      let cell = [x + transformX, y + transformY]\n      if ( !Cell.isInside(cell, size) || transformX * transformX + transformY * transformY > range * range )\n        break\n      if (!fullShadow) {\n        let projection = getProjection(row, col)\n        let visible = !shadows.find( shadow => shadow.start <= projection.start && shadow.end >= projection.end )\n        if (visible) {\n          cells.push(cell)\n          if ( Gen.getTileAt(data, cell).opaque ) {\n            let index\n            for (index = 0; index < shadows.length; index++)\n              if (shadows[index].start >= projection.start)\n                break\n            let prev = shadows[index - 1]\n            let next = shadows[index]\n            let overPrev = index > 0 && prev.end > projection.start\n            let overNext = index < shadows.length && next.start < projection.end\n            if (overNext)\n              if (overPrev) {\n                prev.end = next.end\n                shadows.splice(index, 1)\n              } else\n                next.start = projection.start\n            else\n              if (overPrev)\n                prev.end = projection.end\n              else\n                shadows.splice(index, 0, projection)\n            let shadow = shadows[0]\n            fullShadow = shadows.length === 1 && shadow.start === 0 && shadow.end === 1\n          }\n        }\n      }\n    }\n  }\n  return cells\n}\n\nfunction getProjection(row, col) {\n  let start =  col      / (row + 2)\n  let end   = (col + 1) / (row + 1)\n  return {start, end}\n}\n\nfunction transformOctant(row, col, octant) {\n  switch (octant) {\n    case 0: return [ col, -row]\n    case 1: return [ row, -col]\n    case 2: return [ row,  col]\n    case 3: return [ col,  row]\n    case 4: return [-col,  row]\n    case 5: return [-row,  col]\n    case 6: return [-row, -col]\n    case 7: return [-col, -row]\n  }\n}\n","const directions = {\n  left:      [-1,  0],\n  upLeft:    [-1, -1],\n  up:        [ 0, -1],\n  upRight:   [ 1, -1],\n  right:     [ 1,  0],\n  downRight: [ 1,  1],\n  down:      [ 0,  1],\n  downLeft:  [-1,  1]\n}\nconst { left, upLeft, up, upRight, right, downRight, down, downLeft } = directions\nconst cardinalDirections = { left, up, right, down }\n\nconst constants = { left, right, up, down, upLeft, upRight, downLeft, downRight, directions, cardinalDirections }\nconst methods   = { toString, fromString, toIndex, fromIndex, isEqual, isEdge, isInside, getNeighbors, getManhattan, getDistance }\n\nconst Cell = Object.assign({}, constants, methods)\n\nexport default Cell\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction toIndex(cell, size) {\n  let [x, y] = cell\n  return y * size + x\n}\n\nfunction fromIndex(index, size) {\n  let x = index % size\n  let y = (index - x) / size\n  return [x, y]\n}\n\nfunction isEqual(a, b) {\n  return a[0] === b[0] && a[1] === b[1]\n}\n\nfunction isEdge(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return isInside(cell, size) && (x === rectX || x === rectX + rectWidth - 1 || y === rectY || y === rectY + rectHeight - 1)\n}\n\nfunction isInside(cell, size) {\n  let [x, y] = cell\n  let rect = [0, 0, size, size]\n  if ( Array.isArray(size) )\n    rect = size\n  let [rectX, rectY, rectWidth, rectHeight] = rect\n  return x >= rectX && y >= rectY && x < rectX + rectWidth && y < rectY + rectHeight\n}\n\nfunction getNeighbors(cell, diagonals, step) {\n  if (!cell)\n    throw new TypeError(`Cannot get neighbors of cell '${cell}'`)\n  step = step || 1\n  let [x, y] = cell\n  let neighbors = []\n  let dirs = cardinalDirections\n  if (diagonals)\n    dirs = directions\n  for (let key in dirs) {\n    let [dx, dy] = dirs[key]\n    let current  = [x + dx * step, y + dy * step]\n    let [cx, cy] = current\n    neighbors.push( [cx, cy] )\n  }\n  return neighbors\n}\n\nfunction getManhattan(a, b) {\n  let [ax, ay] = a\n  let [bx, by] = b\n  return Math.abs(ax - bx) + Math.abs(ay - by)\n}\n\nfunction getDistance(a, b, sqrt) {\n  if (typeof sqrt === 'undefined')\n    sqrt = true\n  let [ax, ay] = a\n  let [bx, by] = b\n  let [dx, dy] = [bx - ax, by - ay]\n  let squared  = dx * dx + dy * dy\n  if (sqrt)\n    return Math.sqrt(squared)\n  return squared\n}\n","export default { toString, fromString, isEqual, isIntersecting, getCorners, getEdges, getBorder, getCenter, getCells }\n\nfunction toString(cell) {\n  return cell.toString()\n}\n\nfunction fromString(string) {\n  return string.split(',').map(Number)\n}\n\nfunction isEqual(a, b) {\n  var i = a.length\n  while (i--)\n    if (a[i] !== b[i])\n      return false\n  return true\n}\n\nfunction isIntersecting(a, b, exclusive) {\n  let [ ax, ay, aw, ah ] = a\n  let [ bx, by, bw, bh ] = b\n  if (exclusive)\n    ax--, ay--, aw += 2, ah += 2,\n    bx--, by--, bw += 2, bh += 2\n  return ax <= bx + bw && ay <= by + bh && ax + aw >= bx && ay + ah >= by\n}\n\nfunction getCorners(rect, exclusive) {\n  var [ x, y, w, h ] = rect\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  return [ [x, y], [x + w - 1, y], [x, y + h - 1], [x + w - 1, y + h - 1] ]\n}\n\nfunction getEdges(rect, exclusive) {\n  var edges = []\n  var [ x, y, w, h ] = rect\n  var r = x + w, b = y + h, i\n  if (exclusive)\n    x--, y--, w += 2, h += 2\n  for (i = x + 1; i < r; i++)\n    edges.push( [ i, y ], [ i, b ] )\n  for (i = y + 1; i < b; i++)\n    edges.push( [ x, i ], [ r, i ] )\n  return edges\n}\n\nfunction getBorder(rect, exclusive) {\n  return getEdges(rect, exclusive).concat( getCorners(rect, exclusive) )\n}\n\nfunction getCenter(rect) {\n  var x, y, w, h\n  if ( Array.isArray(rect) ) {\n    [x, y, w, h] = rect\n    if (rect.length == 2)\n      w = x, h = y, x = 0, y = 0\n  } else if ( !isNaN(rect) )\n    x = 0, y = 0, w = rect, h = rect\n  return [ Math.floor(x + w / 2), Math.floor(y + h / 2) ]\n}\n\nfunction getCells(rect) {\n  var cells = []\n  var [ rectX, rectY, rectWidth, rectHeight ] = rect\n  var i = rectWidth * rectHeight\n  while (i--) {\n    var x = i % rectWidth\n    var y = (i - x) / rectWidth\n    cells[i] = [x + rectX, y + rectY]\n  }\n  return cells\n}\n","import { RNG, Cell, Rect } from './index'\n\nconst [FLOOR, WALL, DOOR, DOOR_OPEN, DOOR_SECRET, ENTRANCE, EXIT] = [0, 1, 2, 3, 4, 5, 6]\n\nconst tiles = [\n  {\n    name: 'floor',\n    walkable: true\n  },\n  {\n    name: 'wall',\n    opaque: true\n  },\n  {\n    name: 'door',\n    opaque: true,\n    door: true\n  },\n  {\n    name: 'doorOpen',\n    walkable: true,\n    door: true\n  },\n  {\n    name: 'doorSecret',\n    opaque: true,\n    door: true\n  },\n  {\n    name: 'entrance',\n    walkable: true,\n    stairs: true\n  },\n  {\n    name: 'exit',\n    walkable: true,\n    stairs: true\n  }\n]\n\nlet rng = RNG.create()\n\nlet sqrt = function (cache) {\n\n  cache = cache || {}\n\n  return function sqrt(num) {\n    let cached = cache[num]\n    if (cached)\n      return cached\n    let result = cache[num] = Math.sqrt(num)\n    return result\n  }\n\n}()\n\nexport default { tiles, createWorld, createDungeon, spawn, fill, clear, getSize, getAt, getTileAt, setAt, elementsAt, entitiesAt, itemsAt, openDoor, closeDoor }\n\nfunction createWorld(size) {\n  let data = new Uint8ClampedArray(size * size)\n  let world = { size, data, entities: [], items: [], entrance: null, exit: null }\n  return world\n}\n\nfunction createDungeon(size, seed) {\n\n  if (!size % 2)\n    throw new RangeError(`Cannot create dungeon of even size ${size}`)\n\n  if (typeof seed === 'object') {\n    rng = seed\n    seed = rng.seed()\n  } else if ( isNaN(seed) ) {\n    seed = rng.get()\n    rng.seed(seed)\n  }\n\n  console.log('Seed:', seed)\n\n  let world = createWorld(size)\n\n  let data = fill(world.data)\n\n  let rooms = findRooms(data)\n  let mazes = findMazes(data, rooms)\n  let doors = findDoors(data, rooms, mazes)\n  fillEnds(data, mazes)\n\n  for (let room of rooms.list)\n    for (let cell of room.cells)\n      setAt(data, cell, FLOOR)\n\n  for (let maze of mazes.list)\n    for (let cell of maze.cells)\n      setAt(data, cell, FLOOR)\n\n  for (let cellId in doors) {\n    let cell = Cell.fromString(cellId)\n    let type = DOOR\n    let regions = doors[cellId]\n    let room = regions.sort((a, b) => a.neighbors.size - b.neighbors.size)[0]\n    let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.ends)\n    if (!neighbors.length && room.neighbors.size === 1 && rng.choose()) {\n      type = DOOR_SECRET\n      rooms.normal.delete(room)\n      rooms.secret.add(room)\n    } else if (rng.choose())\n      type = FLOOR\n    setAt(data, cell, type)\n  }\n\n  Object.assign(world, { rooms })\n\n  spawn(world, EXIT, 'center')\n\n  return world\n}\n\nlet findRooms = function () {\n\n  let findRoom = function () {\n\n    return function findRoom(min, max, worldSize) {\n      let w = findRoomSize(min, max)\n      let h = findRoomSize(min, max)\n      let x = findRoomPosition(w, worldSize)\n      let y = findRoomPosition(h, worldSize)\n      return [x, y, w, h]\n    }\n\n    function findRoomSize(min, max) {\n      return rng.get((max - min) / 2 + 1) * 2 + min\n    }\n\n    function findRoomPosition(roomSize, worldSize) {\n      return rng.get((worldSize - roomSize) / 2) * 2 + 1\n    }\n\n  }()\n\n  return function findRooms(data) {\n    let area = data.length\n    let size = sqrt(area)\n    let rooms = { list: [], normal: new Set, secret: new Set, cells: {}, edges: {} }\n    let matrices = {}\n    let fails = 0\n    let valid = true\n    while (valid) {\n      let shape, matrix, cells, center\n      do {\n        shape  = 'rect'\n        matrix = findRoom(3, 9, size)\n        if (matrix in matrices)\n          valid = false\n        else {\n          cells = Rect.getCells(matrix)\n          center = Rect.getCenter(matrix)\n          valid = matrices[matrix] = !isIntersecting(rooms, cells)\n        }\n        if (valid)\n          break\n        fails++\n      } while (fails < size * 2)\n      if (!valid)\n        break\n      let edges  = Rect.getEdges(matrix, true)\n      let room = { type: 'room', shape, matrix, cells, edges, center }\n      rooms.normal.add(room)\n      rooms.list.push(room)\n      for (let cell of cells)\n        rooms.cells[cell] = room\n      for (let edge of edges) {\n        if (!rooms.edges[edge])\n          rooms.edges[edge] = []\n        let sharedEdges = rooms.edges[edge]\n        sharedEdges.push(room)\n      }\n    }\n    return rooms\n  }\n\n  function isIntersecting(rooms, cells) {\n    for (let cell of cells)\n      if (cell in rooms.cells)\n        return true\n    return false\n  }\n\n}()\n\nlet findMazes = function () {\n\n  return function findMazes(data, rooms, step) {\n    step = step || 2\n    let size  = getSize(data)\n    let mazes = { list: [], cells: {}, ends: {} }\n    let nodes = new Set(findNodes(size)\n      .filter(node => !(node in rooms.cells) && !Cell.getNeighbors(node, true).filter(neighbor => neighbor in rooms.cells).length)\n      .map(Cell.toString))\n    while (nodes.size) {\n      let start = Cell.fromString(rng.choose( [...nodes] ))\n      let stack = [start]\n      let maze = { type: 'maze', cells: [], ends: [] }\n      let backtracking = true\n      while (stack.length) {\n        let cell, [cellX, cellY] = cell = stack[stack.length - 1]\n        addCell(mazes, maze, cell)\n        nodes.delete(cell.toString())\n        let neighbors = Cell.getNeighbors(cell, false, step).filter(neighbor => nodes.has(neighbor.toString()))\n        if (neighbors.length) {\n          let next = rng.choose(neighbors)\n          let [nextX, nextY] = next\n          let [cellX, cellY] = cell\n          let mid, [midX, midY] = mid = [cellX + (nextX - cellX) / step, cellY + (nextY - cellY) / step]\n          addCell(mazes, maze, mid)\n          stack.push(next)\n          backtracking = false\n          if (cell === start && !backtracking)\n            addEnd(mazes, maze, cell)\n        } else {\n          if (!backtracking)\n            addEnd(mazes, maze, cell)\n          backtracking = true\n          stack.pop()\n        }\n      }\n      mazes.list.push(maze)\n    }\n    return mazes\n  }\n\n  function findNodes(worldSize, offset) {\n    offset = offset || 0\n    let nodes = []\n    let half = (worldSize - 1) / 2 - offset\n    let i = half * half\n    while (i--) {\n      let [nodeX, nodeY] = Cell.fromIndex(i, half)\n      let node = [nodeX * 2 + 1 + offset, nodeY * 2 + 1 + offset]\n      let neighbors = null\n      nodes.push(node)\n    }\n    return nodes\n  }\n\n  function addCell(mazes, maze, cell) {\n    maze.cells.push(cell)\n    mazes.cells[cell] = maze\n  }\n\n  function addEnd(mazes, maze, cell) {\n    maze.ends.push(cell)\n    mazes.ends[cell] = maze\n  }\n\n}()\n\nlet findDoors = function () {\n\n  return function findDoors(data, rooms, mazes) {\n\n    let connectorRegions = getConnectors(rooms, mazes)\n\n    let start = rng.choose(rooms.list)\n    let stack = [start]\n    let doors = {}\n    let mainRegion = new Set\n    let dead = new Set\n\n    let regions = rooms.list.concat(mazes.list)\n    for (let region of regions) {\n      region.neighbors = new Map\n      region.doors = {}\n    }\n\n    while (stack.length) {\n      let node = stack[stack.length - 1]\n      mainRegion.add(node)\n\n      let connectors\n      if (node.type === 'room')\n        connectors = node.edges.filter(cell => {\n          if (!(cell in connectorRegions))\n            return false\n          let next = connectorRegions[cell].find(region => region !== node)\n          return !dead.has(next) && next.cells.length > 1\n        })\n      else if (node.type === 'maze')\n        connectors = node.cells.reduce((result, cell) => {\n          return result.concat(Cell.getNeighbors(cell).filter(neighbor => neighbor in connectorRegions))\n        }, [])\n      connectors = connectors.filter(cell => {\n        let next = connectorRegions[cell].find(region => region !== node)\n        let nearby = Cell.getNeighbors(cell, true).filter(neighbor => neighbor in doors)\n        return !(cell in doors) && !node.neighbors.has(next) && (!mainRegion.has(next) || rng.choose(10)) && !nearby.length\n      })\n\n      let connectorIds = connectors.map(Cell.toString)\n\n      if (connectors.length) {\n        let door = rng.choose(connectors)\n        let regions = connectorRegions[door]\n        let next = regions.find(region => region !== node)\n        for (let cell of next.cells) {\n          Cell.getNeighbors(cell).forEach(neighbor => {\n            if (connectorIds.includes(neighbor.toString())) {\n              delete connectorRegions[neighbor]\n            }\n          })\n        }\n        stack.push(next)\n        doors[door] = regions\n        mainRegion.add(node)\n        connect(node, next, door)\n      } else {\n        stack.pop()\n        if (node.type === 'maze' && node.neighbors.size === 1) {\n          let next = node.neighbors.entries().next().value[0]\n          let cell = node.neighbors.get(next)\n          delete doors[cell]\n          disconnect(node, next)\n          mainRegion.delete(node)\n          dead.add(node)\n        }\n      }\n    }\n\n    return doors\n\n  }\n\n  function getConnectors(rooms, mazes) {\n    let connectorRegions = {}\n    Object.keys(rooms.edges)\n      .map(Cell.fromString)\n      .filter(edge => edge[0] % 2 || edge[1] % 2)\n      .forEach(edge => {\n        let regions = Cell.getNeighbors(edge)\n          .filter(neighbor => neighbor in rooms.cells || neighbor in mazes.cells)\n             .map(neighbor =>   rooms.cells[neighbor] || mazes.cells[neighbor]  )\n        if (regions.length >= 2)\n          connectorRegions[edge] = regions\n      })\n    return connectorRegions\n  }\n\n  function connect(node, next, door) {\n    connectOne(node, next, door)\n    connectOne(next, node, door)\n  }\n\n  function connectOne(node, next, door) {\n    node.neighbors.set(next, door)\n    node.doors[door] = next\n  }\n\n  function disconnect(node, next) {\n    disconnectOne(node, next)\n    disconnectOne(next, node)\n  }\n\n  function disconnectOne(node, next) {\n    let connector = node.neighbors.get(next)\n    delete node.doors[connector]\n  }\n\n}()\n\nlet fillEnds = function () {\n\n  return function fillEnds(data, mazes) {\n    mazes.ends = {}\n    for (let maze of mazes.list) {\n      let cells = new Set(maze.cells.map(Cell.toString))\n      let ends  = []\n      let stack = maze.ends\n      while (stack.length) {\n        let cell = stack.pop()\n        let neighbors = Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells || neighbor in maze.doors)\n        if (neighbors.length > 1) {\n          ends.push(cell)\n          continue\n        }\n        setAt(data, cell, WALL)\n        cells.delete(cell.toString())\n        delete mazes.cells[cell]\n        let next = neighbors[0]\n        if (next)\n          stack.unshift(next)\n      }\n      maze.cells = [...cells].map(Cell.fromString)\n      maze.ends  = ends = ends\n        .filter(cell => cell in mazes.cells && Cell.getNeighbors(cell).filter(neighbor => neighbor in mazes.cells).length === 1)\n      ends.forEach(cell => mazes.ends[cell] = maze)\n    }\n  }\n\n}()\n\nfunction spawn(world, element, cell) {\n  if (!world.rooms)\n    return null\n  if (typeof cell !== 'object') {\n    let valid\n    do {\n      let room = rng.choose( [...world.rooms.normal] )\n      if (cell !== 'center')\n        cell = rng.choose(room.cells)\n      else\n        cell = room.center\n    } while (elementsAt(world, cell).length && getAt(world.data, cell) === FLOOR)\n  }\n  if ( !isNaN(element) ) {\n    setAt(world.data, cell, element)\n    if (element === ENTRANCE)\n      world.entrance = cell\n    if (element === EXIT)\n      world.exit = cell\n  } else if (typeof element === 'object') {\n    element.world = world\n    element.cell  = cell\n    getList(world, element).push(element)\n  }\n  return cell\n}\n\nfunction kill(world, element) {\n  let list = getList(element)\n  if (!list)\n    return false\n  let index = list.indexOf(element)\n  if (index < 0)\n    return false\n  list.splice(index, 1)\n  return true\n}\n\nfunction elementsAt(world, cell) {\n  return entitiesAt(world, cell).concat(itemsAt(world, cell))\n}\n\nfunction entitiesAt(world, cell) {\n  return world.entities.filter( entity => Cell.isEqual(entity.cell, cell) )\n}\n\nfunction itemsAt(world, cell) {\n  return world.items.filter( item => Cell.isEqual(item.cell, cell) )\n}\n\nfunction getList(world, element) {\n  switch (element.type) {\n    case 'entity':\n      return world.entities\n    case 'item':\n      return world.items\n    default:\n      return null\n  }\n}\n\nfunction fill(data, value, rect) {\n  if (typeof value === 'undefined')\n    value = WALL\n  let size = getSize(data)\n  if (rect) {\n    let cells = Rect.getCells(rect)\n    for (let cell of cells)\n      setAt(data, cell, value)\n  } else {\n    let i = data.length\n    while (i--)\n      data[i] = value\n  }\n  return data\n}\n\nfunction clear(data) {\n  fill(data, FLOOR)\n  return data\n}\n\nfunction getSize(data) {\n  return sqrt(data.length)\n}\n\nfunction getAt(data, cell) {\n  let size = getSize(data)\n  if (!Cell.isInside(cell, size))\n    return null\n  let index = Cell.toIndex(cell, size)\n  return data[index]\n}\n\nfunction getTileAt(data, cell) {\n  return tiles[getAt(data, cell)]\n}\n\nfunction setAt(data, cell, value) {\n  let size = getSize(data)\n  if (!Cell.isInside(cell, size))\n    return null\n  let index = Cell.toIndex(cell, size)\n  data[index] = value\n  return value\n}\n\nfunction openDoor(world, cell, entity) {\n  if (!entity)\n    entity = null\n  let data = world.data.slice()\n  let tile = getTileAt(data, cell)\n  if (tile.door && !tile.walkable) {\n    setAt(data, cell, DOOR_OPEN)\n    world.data = data\n    return true\n  }\n  return false\n}\n\nfunction closeDoor(world, cell, entity) {\n  if (!entity)\n    entity = null\n  let data = world.data.slice()\n  let tile = getTileAt(data, cell)\n  if (tile.door && tile.walkable) {\n    setAt(data, cell, DOOR)\n    world.data = data\n    return true\n  }\n  return false\n}\n\nfunction toggleDoor(world, cell, entity) {\n  let tile = getTileAt(world.data, cell)\n  if (tile.door)\n    if (!tile.walkable)\n      return openDoor(world, cell, entity)\n    else\n      return closeDoor(world, cell, entity)\n  return false\n}\n","const names  = [  'black',  'maroon',   'green',   'olive',    'navy',  'purple',    'teal',  'silver',    'gray',     'red',    'lime',  'yellow',    'blue', 'fuchsia',    'aqua',   'white']\nconst values = ['#000000', '#800000', '#008000', '#808000', '#000080', '#800080', '#008080', '#c0c0c0', '#808080', '#ff0000', '#00ff00', '#ffff00', '#0000ff', '#ff00ff', '#00ffff', '#ffffff']\n\nlet MAP = {}\nlet map = {}\n\nlet index = 0\nfor (let name of names) {\n  let NAME  = name.toUpperCase()\n  MAP[NAME] = values[index]\n  map[name] = values[index++]\n}\n\nlet Color = Object.assign({ names, values, map }, MAP)\n\nexport default Color\n","import { Cell, Gen, FOV } from './index'\n\nexport default { create }\n\nfunction create(options) {\n\n  let entity = {\n    entityType: null,\n    kind: null\n  }\n\n  let props = {\n    type: 'entity',\n    wandering: true,\n    health: 1,\n    seeing: {},\n    known: {},\n    world: null,\n    cell: null\n  }\n\n  Object.assign(entity, options, props)\n\n  let path = null\n\n  function look() {\n    let cells = FOV.get(entity.world.data, entity.cell, 7)\n    entity.seeing = {}\n    for (var cell of cells) {\n      let kind = Gen.getTileAt(entity.world.data, cell).name\n      let other = Gen.elementsAt(entity.world, cell)[0]\n      if (other)\n        kind = other.kind\n      entity.known[cell] = kind\n      entity.seeing[cell] = true\n    }\n  }\n\n  function move(direction) {\n    let moved = false\n    let world = entity.world\n    let [cellX, cellY] = entity.cell\n    let [distX, distY] = direction\n    let target = [cellX + distX, cellY + distY]\n    let id = Gen.getAt(world.data, target)\n    let tile = Gen.tiles[id]\n    let entities = Gen.entitiesAt(world, target)\n    let items    = Gen.itemsAt(world, target)\n    if (entities.length) {\n      let enemy = entities[0]\n      attack(enemy)\n    } else if (tile.walkable) {\n      if (!entities.length) {\n        entity.cell = target\n        if (items.length) {\n          let item = items[0]\n          entity.collect(item)\n        } else {\n          moved = true\n        }\n        look()\n      }\n    } else if (tile.door) {\n      Gen.openDoor(world, target)\n      look()\n      moved = true\n    }\n    return moved\n  }\n\n  function moveTo(target) {\n    if ( !path || path[path.length - 1] !== target )\n      path = entity.world.findPath(entity, target)\n    if (!path)\n      return false\n    let next\n    path.some(function(cell, index) {\n      if ( !Cell.isEqual(entity.cell, cell) )\n        return\n      next = path[index + 1]\n      return true\n    })\n    if (!next)\n      return false\n    let [cellX, cellY] = entity.cell\n    let [nextX, nextY] = next\n    let dist = [nextX - cellX, nextY - cellY]\n    return entity.move(dist)\n  }\n\n  function attack(other) {\n    other.health--\n    if (other.health <= 0){\n      entity.world.kill(other)\n      look()\n    }\n  }\n\n  function collect(item) {\n    if ( Cell.isEqual(entity.cell, item.cell) ) {\n      entity.world.kill(item)\n      entity.world.emit('item', entity, item)\n    }\n  }\n\n  let methods = { look, move, moveTo, attack, collect }\n  return Object.assign(entity, methods)\n}\n","import { Cell, Gen, Color, Entity, RNG, FOV } from './utils/index'\n\nconst blessed = require('blessed')\n\nconst options = { smartCSR: true }\n\nlet screen = blessed.screen(options)\nscreen.title = 'Hello world!'\n\nlet { BLACK, MAROON, GREEN, OLIVE, NAVY, PURPLE, TEAL, SILVER, GRAY: YELLOW, RED, LIME, YELLOW: GRAY, BLUE, FUCHSIA, AQUA, WHITE } = Color\n\nconst sprites = function () {\n\n  const floor      = [183, OLIVE]\n  const wall       = ['#', TEAL]\n  const door       = ['+', MAROON]\n  const doorOpen   = ['/', MAROON]\n  const doorSecret = wall\n  const entrance   = ['<', WHITE]\n  const exit       = ['>', WHITE]\n  const human      = ['@', WHITE]\n\n  return { floor, wall, door, doorOpen, doorSecret, entrance, exit, human }\n\n}()\n\nfunction render(world, entity) {\n  let view = ''\n  let { data, size } = world\n  let y = size\n  while (y--) {\n    let row = data.slice(y * size, (y + 1) * size)\n    let line = ''\n    let x = 0\n    for (let id of row) {\n      let cell = [x, y]\n      let char = ' ', color\n      let type = Gen.tiles[id].name\n      if (entity)\n        type = entity.known[cell]\n      if (type) {\n        if ( !(type in sprites) ) {\n          throw new TypeError('Unrecognized sprite: ' + type)\n        }\n        [char, color] = sprites[type]\n        if (entity && !entity.seeing[cell])\n          color = GRAY\n      }\n      if (typeof char === 'number')\n        char = String.fromCharCode(char)\n      if (color)\n        char = `{${color}-fg}${char}{/}`\n      line += char\n      x++\n    }\n    view = line + view + '\\n'\n  }\n  return view\n}\n\nlet rng = RNG.create(5866.672160786003)\n\nlet floors = []\nlet floor = 0\nlet world\nlet hero = Entity.create( { entityType: 'hero', kind: 'human' } )\n\nfunction rerender() {\n  box.setContent(render(world, hero))\n  screen.render()\n}\n\nfunction move(direction) {\n  let moved = hero.move(direction)\n  if (moved) {\n    rerender()\n  }\n}\n\nfunction descend() {\n  world = Gen.createDungeon(25, rng)\n  Gen.spawn(world, hero)\n  hero.look()\n  floors.push(world)\n  rerender()\n}\n\nlet box = blessed.box({\n  top: 'center',\n  left: 'center',\n  width: 25,\n  height: 25,\n  tags: true\n})\n\nscreen.on('keypress', (ch, key) => {\n  if (key.name === 'escape' || key.ctrl && key.name === 'c')\n    return process.exit(0)\n  if (key.name in Cell.cardinalDirections)\n    move(Cell.directions[key.name])\n  if (key.ch === '>') {\n    console.log(hero.cell)\n    if (Gen.getTileAt(world.data, hero.cell).name === 'exit')\n      descend()\n  }\n})\n\nscreen.append(box)\n\ndescend()\n"],"names":["RNG","create","initialSeed","isNaN","Math","random","currentSeed","get","choose","seed","min","max","a","arguments","length","x","sin","floor","Array","isArray","array","newSeed","data","start","range","cells","i","concat","getOctant","push","octant","Infinity","size","Gen","getSize","y","shadows","fullShadow","row","transformOctant","transformX","transformY","cell","Cell","isInside","col","projection","getProjection","visible","find","shadow","end","getTileAt","opaque","index","prev","next","overPrev","overNext","splice","directions","left","upLeft","up","upRight","right","downRight","down","downLeft","cardinalDirections","constants","methods","toString","fromString","toIndex","fromIndex","isEqual","isEdge","getNeighbors","getManhattan","getDistance","Object","assign","string","split","map","Number","b","rect","rectX","rectY","rectWidth","rectHeight","diagonals","step","TypeError","neighbors","dirs","key","dx","dy","current","cx","cy","ax","ay","bx","by","abs","sqrt","squared","isIntersecting","getCorners","getEdges","getBorder","getCenter","getCells","exclusive","aw","ah","bw","bh","w","h","edges","r","FLOOR","WALL","DOOR","DOOR_OPEN","DOOR_SECRET","ENTRANCE","EXIT","tiles","rng","cache","num","cached","result","createWorld","createDungeon","spawn","fill","clear","getAt","setAt","elementsAt","entitiesAt","itemsAt","openDoor","closeDoor","Uint8ClampedArray","world","entities","items","entrance","exit","RangeError","log","rooms","findRooms","mazes","findMazes","doors","findDoors","list","room","maze","cellId","type","regions","sort","filter","neighbor","ends","normal","delete","secret","add","findRoom","worldSize","findRoomSize","findRoomPosition","roomSize","area","Set","matrices","fails","valid","shape","matrix","center","Rect","edge","sharedEdges","nodes","findNodes","node","stack","backtracking","cellX","cellY","has","nextX","nextY","mid","midX","midY","addEnd","pop","offset","half","nodeX","nodeY","addCell","connectorRegions","getConnectors","mainRegion","dead","region","Map","connectors","reduce","nearby","connectorIds","door","forEach","includes","entries","value","keys","connect","connectOne","set","disconnect","disconnectOne","connector","fillEnds","unshift","element","entity","item","getList","slice","tile","walkable","names","values","MAP","name","NAME","toUpperCase","Color","options","props","path","look","FOV","seeing","kind","other","known","move","direction","moved","distX","distY","target","id","enemy","collect","moveTo","findPath","some","dist","attack","health","kill","emit","blessed","require","smartCSR","screen","title","MAROON","OLIVE","TEAL","GRAY","YELLOW","WHITE","sprites","wall","doorOpen","doorSecret","human","render","view","line","char","color","String","fromCharCode","floors","hero","Entity","entityType","rerender","setContent","descend","box","on","ch","ctrl","process","append"],"mappings":"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"}